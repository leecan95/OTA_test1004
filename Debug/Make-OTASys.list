
Make-OTASys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800543c  0800543c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08005444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001ec  08005630  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005630  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b534  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f4  00000000  00000000  0002b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002d948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002e340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001715a  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000941e  00000000  00000000  00045d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086d62  00000000  00000000  0004f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000d5f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005150 	.word	0x08005150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08005150 	.word	0x08005150

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f002 fffc 	bl	80035c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f965 	bl	80008c2 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f92d 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000014 	.word	0x20000014
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000298 	.word	0x20000298

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000298 	.word	0x20000298

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff29 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff3e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff31 	bl	800071c <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00e      	b.n	800090a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	795b      	ldrb	r3, [r3, #5]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f002 fe87 	bl	8003610 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b02      	cmp	r3, #2
 8000924:	d004      	beq.n	8000930 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e00c      	b.n	800094a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2205      	movs	r2, #5
 8000934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0201 	bic.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <HAL_FLASH_Program+0xa0>)
 800096c:	7e1b      	ldrb	r3, [r3, #24]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <HAL_FLASH_Program+0x1e>
 8000972:	2302      	movs	r3, #2
 8000974:	e03b      	b.n	80009ee <HAL_FLASH_Program+0x96>
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_FLASH_Program+0xa0>)
 8000978:	2201      	movs	r2, #1
 800097a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800097c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000980:	f000 f860 	bl	8000a44 <FLASH_WaitForLastOperation>
 8000984:	4603      	mov	r3, r0
 8000986:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d12b      	bne.n	80009e6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d105      	bne.n	80009a0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000994:	783b      	ldrb	r3, [r7, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f000 f909 	bl	8000bb0 <FLASH_Program_Byte>
 800099e:	e016      	b.n	80009ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d105      	bne.n	80009b2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80009a6:	883b      	ldrh	r3, [r7, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	68b8      	ldr	r0, [r7, #8]
 80009ac:	f000 f8dc 	bl	8000b68 <FLASH_Program_HalfWord>
 80009b0:	e00d      	b.n	80009ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d105      	bne.n	80009c4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	68b8      	ldr	r0, [r7, #8]
 80009be:	f000 f8b1 	bl	8000b24 <FLASH_Program_Word>
 80009c2:	e004      	b.n	80009ce <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80009c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009c8:	68b8      	ldr	r0, [r7, #8]
 80009ca:	f000 f87b 	bl	8000ac4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009d2:	f000 f837 	bl	8000a44 <FLASH_WaitForLastOperation>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_FLASH_Program+0xa4>)
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_FLASH_Program+0xa4>)
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_FLASH_Program+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	761a      	strb	r2, [r3, #24]
  
  return status;
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000029c 	.word	0x2000029c
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_FLASH_Unlock+0x38>)
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	da0b      	bge.n	8000a2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_FLASH_Unlock+0x38>)
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_FLASH_Unlock+0x3c>)
 8000a16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_FLASH_Unlock+0x38>)
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_FLASH_Unlock+0x40>)
 8000a1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_FLASH_Unlock+0x38>)
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da01      	bge.n	8000a2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40023c00 	.word	0x40023c00
 8000a3c:	45670123 	.word	0x45670123
 8000a40:	cdef89ab 	.word	0xcdef89ab

08000a44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <FLASH_WaitForLastOperation+0x78>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000a56:	f7ff fe01 	bl	800065c <HAL_GetTick>
 8000a5a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000a5c:	e010      	b.n	8000a80 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d00c      	beq.n	8000a80 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <FLASH_WaitForLastOperation+0x38>
 8000a6c:	f7ff fdf6 	bl	800065c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d201      	bcs.n	8000a80 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e019      	b.n	8000ab4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <FLASH_WaitForLastOperation+0x7c>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1e8      	bne.n	8000a5e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <FLASH_WaitForLastOperation+0x7c>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <FLASH_WaitForLastOperation+0x7c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <FLASH_WaitForLastOperation+0x7c>)
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000aaa:	f000 f8a3 	bl	8000bf4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
  
}  
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000029c 	.word	0x2000029c
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ac4:	b490      	push	{r4, r7}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000ad2:	691b      	ldr	r3, [r3, #16]
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ada:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000ae2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <FLASH_Program_DoubleWord+0x5c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000afa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000afe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	f04f 0400 	mov.w	r4, #0
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	3204      	adds	r2, #4
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc90      	pop	{r4, r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <FLASH_Program_Word+0x40>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <FLASH_Program_HalfWord+0x44>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	887a      	ldrh	r2, [r7, #2]
 8000b9c:	801a      	strh	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <FLASH_Program_Byte+0x40>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	78fa      	ldrb	r2, [r7, #3]
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c0e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	4a24      	ldr	r2, [pc, #144]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c2c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d008      	beq.n	8000c52 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c4e:	2240      	movs	r2, #64	; 0x40
 8000c50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c68:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d009      	beq.n	8000c90 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f043 0320 	orr.w	r3, r3, #32
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <FLASH_SetErrorCode+0xc8>)
 8000ca6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <FLASH_SetErrorCode+0xc4>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	60da      	str	r2, [r3, #12]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40023c00 	.word	0x40023c00
 8000cbc:	2000029c 	.word	0x2000029c

08000cc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <HAL_FLASHEx_Erase+0xd8>)
 8000cd4:	7e1b      	ldrb	r3, [r3, #24]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <HAL_FLASHEx_Erase+0x1e>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e058      	b.n	8000d90 <HAL_FLASHEx_Erase+0xd0>
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_FLASHEx_Erase+0xd8>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ce4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ce8:	f7ff feac 	bl	8000a44 <FLASH_WaitForLastOperation>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d148      	bne.n	8000d88 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d115      	bne.n	8000d32 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4619      	mov	r1, r3
 8000d12:	4610      	mov	r0, r2
 8000d14:	f000 f844 	bl	8000da0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d1c:	f7ff fe92 	bl	8000a44 <FLASH_WaitForLastOperation>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_FLASHEx_Erase+0xdc>)
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_FLASHEx_Erase+0xdc>)
 8000d2a:	f023 0304 	bic.w	r3, r3, #4
 8000d2e:	6113      	str	r3, [r2, #16]
 8000d30:	e028      	b.n	8000d84 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	e01c      	b.n	8000d74 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4619      	mov	r1, r3
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f000 f850 	bl	8000de8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d4c:	f7ff fe7a 	bl	8000a44 <FLASH_WaitForLastOperation>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_FLASHEx_Erase+0xdc>)
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_FLASHEx_Erase+0xdc>)
 8000d5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000d5e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	601a      	str	r2, [r3, #0]
          break;
 8000d6c:	e00a      	b.n	8000d84 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3da      	bcc.n	8000d3a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8000d84:	f000 f878 	bl	8000e78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_FLASHEx_Erase+0xd8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]

  return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000029c 	.word	0x2000029c
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <FLASH_MassErase+0x44>)
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <FLASH_MassErase+0x44>)
 8000db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <FLASH_MassErase+0x44>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <FLASH_MassErase+0x44>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <FLASH_MassErase+0x44>)
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <FLASH_MassErase+0x44>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6113      	str	r3, [r2, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023c00 	.word	0x40023c00

08000de8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e010      	b.n	8000e26 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d103      	bne.n	8000e12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	e009      	b.n	8000e26 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d103      	bne.n	8000e20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	e002      	b.n	8000e26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	490f      	ldr	r1, [pc, #60]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <FLASH_Erase_Sector+0x8c>)
 8000e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e66:	6113      	str	r3, [r2, #16]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d017      	beq.n	8000eb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000e8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000e9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eaa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d017      	beq.n	8000ef4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ed6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <FLASH_FlushCaches+0x88>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e159      	b.n	80011d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8148 	bne.w	80011ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00b      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0xfc>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b12      	cmp	r3, #18
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a2 	beq.w	80011ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <HAL_GPIO_Init+0x2e4>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <HAL_GPIO_Init+0x2ec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x202>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	; (80011f4 <HAL_GPIO_Init+0x2f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x1fe>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_GPIO_Init+0x2f4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x1fa>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_GPIO_Init+0x2f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x1f6>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a44      	ldr	r2, [pc, #272]	; (8001200 <HAL_GPIO_Init+0x2fc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x1f2>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x204>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x204>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4934      	ldr	r1, [pc, #208]	; (80011ec <HAL_GPIO_Init+0x2e8>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_GPIO_Init+0x300>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001174:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_GPIO_Init+0x300>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_GPIO_Init+0x300>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_GPIO_Init+0x300>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_GPIO_Init+0x300>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f aea2 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	3724      	adds	r7, #36	; 0x24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	401a      	ands	r2, r3
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	429a      	cmp	r2, r3
 8001252:	d104      	bne.n	800125e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800125c:	e002      	b.n	8001264 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f806 	bl	80012a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40013c00 	.word	0x40013c00

080012a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e25b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e236      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff f974 	bl	800065c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff f970 	bl	800065c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1fb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff f960 	bl	800065c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff f95c 	bl	800065c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1e7      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1bb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4952      	ldr	r1, [pc, #328]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff f915 	bl	800065c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff f911 	bl	800065c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e19c      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4940      	ldr	r1, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff f8f4 	bl	800065c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff f8f0 	bl	800065c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e17b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff f8d4 	bl	800065c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff f8d0 	bl	800065c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e15b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff f8bd 	bl	800065c <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff f8b9 	bl	800065c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e144      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff f87f 	bl	800065c <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ce>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	42470000 	.word	0x42470000
 800156c:	42470e80 	.word	0x42470e80
 8001570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff f872 	bl	800065c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0fd      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x312>
 80015b0:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015ca:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a70      	ldr	r2, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff f837 	bl	800065c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f833 	bl	800065c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0bc      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x33a>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff f821 	bl	800065c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f81d 	bl	800065c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0a6      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8092 	beq.w	8001780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d05c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d141      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7fe fff1 	bl	800065c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7fe ffed 	bl	800065c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e078      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7fe ffc6 	bl	800065c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7fe ffc2 	bl	800065c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04d      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x41c>
 80016f2:	e045      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7fe ffaf 	bl	800065c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7fe ffab 	bl	800065c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e036      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x44a>
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e029      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	429a      	cmp	r2, r3
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d115      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7fe fee8 	bl	800065c <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7fe fee4 	bl	800065c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe48 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08005278 	.word	0x08005278
 800195c:	20000014 	.word	0x20000014
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d007      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x32>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d008      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x38>
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 808d 	bne.w	8001aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e08c      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e089      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	ea03 0501 	and.w	r5, r3, r1
 80019c8:	ea04 0602 	and.w	r6, r4, r2
 80019cc:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ce:	fb02 f106 	mul.w	r1, r2, r6
 80019d2:	2200      	movs	r2, #0
 80019d4:	fb02 f205 	mul.w	r2, r2, r5
 80019d8:	440a      	add	r2, r1
 80019da:	493a      	ldr	r1, [pc, #232]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	fba5 0101 	umull	r0, r1, r5, r1
 80019e0:	1853      	adds	r3, r2, r1
 80019e2:	4619      	mov	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	f7fe fc4f 	bl	8000290 <__aeabi_uldivmod>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e049      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	ea03 0501 	and.w	r5, r3, r1
 8001a10:	ea04 0602 	and.w	r6, r4, r2
 8001a14:	4629      	mov	r1, r5
 8001a16:	4632      	mov	r2, r6
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0154      	lsls	r4, r2, #5
 8001a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a26:	014b      	lsls	r3, r1, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	1b49      	subs	r1, r1, r5
 8001a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	f04f 0400 	mov.w	r4, #0
 8001a3a:	0194      	lsls	r4, r2, #6
 8001a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a40:	018b      	lsls	r3, r1, #6
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	eb64 0402 	sbc.w	r4, r4, r2
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	00e2      	lsls	r2, r4, #3
 8001a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	195b      	adds	r3, r3, r5
 8001a5e:	eb44 0406 	adc.w	r4, r4, r6
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	02a2      	lsls	r2, r4, #10
 8001a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a70:	0299      	lsls	r1, r3, #10
 8001a72:	460b      	mov	r3, r1
 8001a74:	4614      	mov	r4, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	f7fe fc04 	bl	8000290 <__aeabi_uldivmod>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	60bb      	str	r3, [r7, #8]
      break;
 8001aa8:	e002      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	017d7840 	.word	0x017d7840

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000014 	.word	0x20000014

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08005288 	.word	0x08005288

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08005288 	.word	0x08005288

08001b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e03f      	b.n	8001bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 fd7c 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fc3d 	bl	80023f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b088      	sub	sp, #32
 8001bce:	af02      	add	r7, sp, #8
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	f040 8083 	bne.w	8001cf2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_UART_Transmit+0x2e>
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e07b      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_UART_Transmit+0x40>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e074      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2221      	movs	r2, #33	; 0x21
 8001c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c20:	f7fe fd1c 	bl	800065c <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c3a:	e042      	b.n	8001cc2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c52:	d122      	bne.n	8001c9a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 fa5c 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e042      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c80:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	e017      	b.n	8001cc2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e013      	b.n	8001cc2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fa39 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e01f      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1b7      	bne.n	8001c3c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2140      	movs	r1, #64	; 0x40
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fa20 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e006      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	f040 8090 	bne.w	8001e3e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_UART_Receive+0x2e>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e088      	b.n	8001e40 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_UART_Receive+0x40>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e081      	b.n	8001e40 <HAL_UART_Receive+0x144>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2222      	movs	r2, #34	; 0x22
 8001d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d52:	f7fe fc83 	bl	800065c <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d6c:	e05c      	b.n	8001e28 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d84:	d12b      	bne.n	8001dde <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2120      	movs	r1, #32
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f9c3 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e04f      	b.n	8001e40 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10c      	bne.n	8001dc6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	e030      	b.n	8001e28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	e024      	b.n	8001e28 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2200      	movs	r2, #0
 8001de6:	2120      	movs	r1, #32
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f997 	bl	800211c <UART_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e023      	b.n	8001e40 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d108      	bne.n	8001e12 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6859      	ldr	r1, [r3, #4]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	60ba      	str	r2, [r7, #8]
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e00a      	b.n	8001e28 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d19d      	bne.n	8001d6e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d140      	bne.n	8001ee4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_UART_Receive_IT+0x26>
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e039      	b.n	8001ee6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_UART_Receive_IT+0x38>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e032      	b.n	8001ee6 <HAL_UART_Receive_IT+0x9e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2222      	movs	r2, #34	; 0x22
 8001ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ebe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_UART_IRQHandler+0x52>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f9d6 	bl	80022f0 <UART_Receive_IT>
      return;
 8001f44:	e0d1      	b.n	80020ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80b0 	beq.w	80020ae <HAL_UART_IRQHandler+0x1ba>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_UART_IRQHandler+0x70>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a5 	beq.w	80020ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_UART_IRQHandler+0x90>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xb0>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_UART_IRQHandler+0xd0>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00f      	beq.n	8001fee <HAL_UART_IRQHandler+0xfa>
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <HAL_UART_IRQHandler+0xee>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	f043 0208 	orr.w	r2, r3, #8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d078      	beq.n	80020e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_UART_IRQHandler+0x11c>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f970 	bl	80022f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_UART_IRQHandler+0x144>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8b9 	bl	80021b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d123      	bne.n	8002094 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_UART_IRQHandler+0x1fc>)
 800206a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fc4e 	bl	8000912 <HAL_DMA_Abort_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d016      	beq.n	80020aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002086:	4610      	mov	r0, r2
 8002088:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208a:	e00e      	b.n	80020aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f83b 	bl	8002108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002092:	e00a      	b.n	80020aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f837 	bl	8002108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209a:	e006      	b.n	80020aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f833 	bl	8002108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020a8:	e01e      	b.n	80020e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020aa:	bf00      	nop
    return;
 80020ac:	e01c      	b.n	80020e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_UART_IRQHandler+0x1d6>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8a6 	bl	8002214 <UART_Transmit_IT>
    return;
 80020c8:	e00f      	b.n	80020ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_UART_IRQHandler+0x1f6>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8ee 	bl	80022c0 <UART_EndTransmit_IT>
    return;
 80020e4:	bf00      	nop
 80020e6:	e000      	b.n	80020ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80020e8:	bf00      	nop
  }
}
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	080021ed 	.word	0x080021ed

080020f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212c:	e02c      	b.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d028      	beq.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <UART_WaitOnFlagUntilTimeout+0x30>
 800213c:	f7fe fa8e 	bl	800065c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	429a      	cmp	r2, r3
 800214a:	d21d      	bcs.n	8002188 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800215a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e00f      	b.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d0c3      	beq.n	800212e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f7ff ff7e 	bl	8002108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b21      	cmp	r3, #33	; 0x21
 8002226:	d144      	bne.n	80022b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d11a      	bne.n	8002268 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002246:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	1c9a      	adds	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]
 800225a:	e00e      	b.n	800227a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	621a      	str	r2, [r3, #32]
 8002266:	e008      	b.n	800227a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	1c59      	adds	r1, r3, #1
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6211      	str	r1, [r2, #32]
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29b      	uxth	r3, r3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4619      	mov	r1, r3
 8002288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
  }
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff07 	bl	80020f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b22      	cmp	r3, #34	; 0x22
 8002302:	d171      	bne.n	80023e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	d123      	bne.n	8002356 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10e      	bne.n	800233a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
 8002338:	e029      	b.n	800238e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	b29b      	uxth	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
 8002354:	e01b      	b.n	800238e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6858      	ldr	r0, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	1c59      	adds	r1, r3, #1
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6291      	str	r1, [r2, #40]	; 0x28
 800236e:	b2c2      	uxtb	r2, r0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e00c      	b.n	800238e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	1c58      	adds	r0, r3, #1
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6288      	str	r0, [r1, #40]	; 0x28
 8002386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4619      	mov	r1, r3
 800239c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d120      	bne.n	80023e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0220 	bic.w	r2, r2, #32
 80023b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 feda 	bl	8003194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e002      	b.n	80023ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002436:	f023 030c 	bic.w	r3, r3, #12
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	430b      	orrs	r3, r1
 8002442:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002462:	f040 818b 	bne.w	800277c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4ac1      	ldr	r2, [pc, #772]	; (8002770 <UART_SetConfig+0x37c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d005      	beq.n	800247c <UART_SetConfig+0x88>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4abf      	ldr	r2, [pc, #764]	; (8002774 <UART_SetConfig+0x380>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 80bd 	bne.w	80025f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800247c:	f7ff fb44 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002480:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	461d      	mov	r5, r3
 8002486:	f04f 0600 	mov.w	r6, #0
 800248a:	46a8      	mov	r8, r5
 800248c:	46b1      	mov	r9, r6
 800248e:	eb18 0308 	adds.w	r3, r8, r8
 8002492:	eb49 0409 	adc.w	r4, r9, r9
 8002496:	4698      	mov	r8, r3
 8002498:	46a1      	mov	r9, r4
 800249a:	eb18 0805 	adds.w	r8, r8, r5
 800249e:	eb49 0906 	adc.w	r9, r9, r6
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024b6:	4688      	mov	r8, r1
 80024b8:	4691      	mov	r9, r2
 80024ba:	eb18 0005 	adds.w	r0, r8, r5
 80024be:	eb49 0106 	adc.w	r1, r9, r6
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	461d      	mov	r5, r3
 80024c8:	f04f 0600 	mov.w	r6, #0
 80024cc:	196b      	adds	r3, r5, r5
 80024ce:	eb46 0406 	adc.w	r4, r6, r6
 80024d2:	461a      	mov	r2, r3
 80024d4:	4623      	mov	r3, r4
 80024d6:	f7fd fedb 	bl	8000290 <__aeabi_uldivmod>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	461a      	mov	r2, r3
 80024e0:	4ba5      	ldr	r3, [pc, #660]	; (8002778 <UART_SetConfig+0x384>)
 80024e2:	fba3 2302 	umull	r2, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	461d      	mov	r5, r3
 80024f0:	f04f 0600 	mov.w	r6, #0
 80024f4:	46a9      	mov	r9, r5
 80024f6:	46b2      	mov	sl, r6
 80024f8:	eb19 0309 	adds.w	r3, r9, r9
 80024fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002500:	4699      	mov	r9, r3
 8002502:	46a2      	mov	sl, r4
 8002504:	eb19 0905 	adds.w	r9, r9, r5
 8002508:	eb4a 0a06 	adc.w	sl, sl, r6
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800251c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002520:	4689      	mov	r9, r1
 8002522:	4692      	mov	sl, r2
 8002524:	eb19 0005 	adds.w	r0, r9, r5
 8002528:	eb4a 0106 	adc.w	r1, sl, r6
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	461d      	mov	r5, r3
 8002532:	f04f 0600 	mov.w	r6, #0
 8002536:	196b      	adds	r3, r5, r5
 8002538:	eb46 0406 	adc.w	r4, r6, r6
 800253c:	461a      	mov	r2, r3
 800253e:	4623      	mov	r3, r4
 8002540:	f7fd fea6 	bl	8000290 <__aeabi_uldivmod>
 8002544:	4603      	mov	r3, r0
 8002546:	460c      	mov	r4, r1
 8002548:	461a      	mov	r2, r3
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <UART_SetConfig+0x384>)
 800254c:	fba3 1302 	umull	r1, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	2164      	movs	r1, #100	; 0x64
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	3332      	adds	r3, #50	; 0x32
 800255e:	4a86      	ldr	r2, [pc, #536]	; (8002778 <UART_SetConfig+0x384>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800256c:	4498      	add	r8, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	461d      	mov	r5, r3
 8002572:	f04f 0600 	mov.w	r6, #0
 8002576:	46a9      	mov	r9, r5
 8002578:	46b2      	mov	sl, r6
 800257a:	eb19 0309 	adds.w	r3, r9, r9
 800257e:	eb4a 040a 	adc.w	r4, sl, sl
 8002582:	4699      	mov	r9, r3
 8002584:	46a2      	mov	sl, r4
 8002586:	eb19 0905 	adds.w	r9, r9, r5
 800258a:	eb4a 0a06 	adc.w	sl, sl, r6
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800259e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025a2:	4689      	mov	r9, r1
 80025a4:	4692      	mov	sl, r2
 80025a6:	eb19 0005 	adds.w	r0, r9, r5
 80025aa:	eb4a 0106 	adc.w	r1, sl, r6
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	461d      	mov	r5, r3
 80025b4:	f04f 0600 	mov.w	r6, #0
 80025b8:	196b      	adds	r3, r5, r5
 80025ba:	eb46 0406 	adc.w	r4, r6, r6
 80025be:	461a      	mov	r2, r3
 80025c0:	4623      	mov	r3, r4
 80025c2:	f7fd fe65 	bl	8000290 <__aeabi_uldivmod>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <UART_SetConfig+0x384>)
 80025ce:	fba3 1302 	umull	r1, r3, r3, r2
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2164      	movs	r1, #100	; 0x64
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	3332      	adds	r3, #50	; 0x32
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <UART_SetConfig+0x384>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f003 0207 	and.w	r2, r3, #7
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4442      	add	r2, r8
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e26f      	b.n	8002ad6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f6:	f7ff fa73 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80025fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	461d      	mov	r5, r3
 8002600:	f04f 0600 	mov.w	r6, #0
 8002604:	46a8      	mov	r8, r5
 8002606:	46b1      	mov	r9, r6
 8002608:	eb18 0308 	adds.w	r3, r8, r8
 800260c:	eb49 0409 	adc.w	r4, r9, r9
 8002610:	4698      	mov	r8, r3
 8002612:	46a1      	mov	r9, r4
 8002614:	eb18 0805 	adds.w	r8, r8, r5
 8002618:	eb49 0906 	adc.w	r9, r9, r6
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800262c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002630:	4688      	mov	r8, r1
 8002632:	4691      	mov	r9, r2
 8002634:	eb18 0005 	adds.w	r0, r8, r5
 8002638:	eb49 0106 	adc.w	r1, r9, r6
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	461d      	mov	r5, r3
 8002642:	f04f 0600 	mov.w	r6, #0
 8002646:	196b      	adds	r3, r5, r5
 8002648:	eb46 0406 	adc.w	r4, r6, r6
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f7fd fe1e 	bl	8000290 <__aeabi_uldivmod>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	461a      	mov	r2, r3
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <UART_SetConfig+0x384>)
 800265c:	fba3 2302 	umull	r2, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	461d      	mov	r5, r3
 800266a:	f04f 0600 	mov.w	r6, #0
 800266e:	46a9      	mov	r9, r5
 8002670:	46b2      	mov	sl, r6
 8002672:	eb19 0309 	adds.w	r3, r9, r9
 8002676:	eb4a 040a 	adc.w	r4, sl, sl
 800267a:	4699      	mov	r9, r3
 800267c:	46a2      	mov	sl, r4
 800267e:	eb19 0905 	adds.w	r9, r9, r5
 8002682:	eb4a 0a06 	adc.w	sl, sl, r6
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800269a:	4689      	mov	r9, r1
 800269c:	4692      	mov	sl, r2
 800269e:	eb19 0005 	adds.w	r0, r9, r5
 80026a2:	eb4a 0106 	adc.w	r1, sl, r6
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	461d      	mov	r5, r3
 80026ac:	f04f 0600 	mov.w	r6, #0
 80026b0:	196b      	adds	r3, r5, r5
 80026b2:	eb46 0406 	adc.w	r4, r6, r6
 80026b6:	461a      	mov	r2, r3
 80026b8:	4623      	mov	r3, r4
 80026ba:	f7fd fde9 	bl	8000290 <__aeabi_uldivmod>
 80026be:	4603      	mov	r3, r0
 80026c0:	460c      	mov	r4, r1
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <UART_SetConfig+0x384>)
 80026c6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2164      	movs	r1, #100	; 0x64
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	3332      	adds	r3, #50	; 0x32
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <UART_SetConfig+0x384>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026e6:	4498      	add	r8, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	461d      	mov	r5, r3
 80026ec:	f04f 0600 	mov.w	r6, #0
 80026f0:	46a9      	mov	r9, r5
 80026f2:	46b2      	mov	sl, r6
 80026f4:	eb19 0309 	adds.w	r3, r9, r9
 80026f8:	eb4a 040a 	adc.w	r4, sl, sl
 80026fc:	4699      	mov	r9, r3
 80026fe:	46a2      	mov	sl, r4
 8002700:	eb19 0905 	adds.w	r9, r9, r5
 8002704:	eb4a 0a06 	adc.w	sl, sl, r6
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800271c:	4689      	mov	r9, r1
 800271e:	4692      	mov	sl, r2
 8002720:	eb19 0005 	adds.w	r0, r9, r5
 8002724:	eb4a 0106 	adc.w	r1, sl, r6
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	461d      	mov	r5, r3
 800272e:	f04f 0600 	mov.w	r6, #0
 8002732:	196b      	adds	r3, r5, r5
 8002734:	eb46 0406 	adc.w	r4, r6, r6
 8002738:	461a      	mov	r2, r3
 800273a:	4623      	mov	r3, r4
 800273c:	f7fd fda8 	bl	8000290 <__aeabi_uldivmod>
 8002740:	4603      	mov	r3, r0
 8002742:	460c      	mov	r4, r1
 8002744:	461a      	mov	r2, r3
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <UART_SetConfig+0x384>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <UART_SetConfig+0x384>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	f003 0207 	and.w	r2, r3, #7
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4442      	add	r2, r8
 800276c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800276e:	e1b2      	b.n	8002ad6 <UART_SetConfig+0x6e2>
 8002770:	40011000 	.word	0x40011000
 8002774:	40011400 	.word	0x40011400
 8002778:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4ad7      	ldr	r2, [pc, #860]	; (8002ae0 <UART_SetConfig+0x6ec>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d005      	beq.n	8002792 <UART_SetConfig+0x39e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4ad6      	ldr	r2, [pc, #856]	; (8002ae4 <UART_SetConfig+0x6f0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	f040 80d1 	bne.w	8002934 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002792:	f7ff f9b9 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002796:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	469a      	mov	sl, r3
 800279c:	f04f 0b00 	mov.w	fp, #0
 80027a0:	46d0      	mov	r8, sl
 80027a2:	46d9      	mov	r9, fp
 80027a4:	eb18 0308 	adds.w	r3, r8, r8
 80027a8:	eb49 0409 	adc.w	r4, r9, r9
 80027ac:	4698      	mov	r8, r3
 80027ae:	46a1      	mov	r9, r4
 80027b0:	eb18 080a 	adds.w	r8, r8, sl
 80027b4:	eb49 090b 	adc.w	r9, r9, fp
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027cc:	4688      	mov	r8, r1
 80027ce:	4691      	mov	r9, r2
 80027d0:	eb1a 0508 	adds.w	r5, sl, r8
 80027d4:	eb4b 0609 	adc.w	r6, fp, r9
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4619      	mov	r1, r3
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	f04f 0400 	mov.w	r4, #0
 80027ea:	0094      	lsls	r4, r2, #2
 80027ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027f0:	008b      	lsls	r3, r1, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	4631      	mov	r1, r6
 80027fa:	f7fd fd49 	bl	8000290 <__aeabi_uldivmod>
 80027fe:	4603      	mov	r3, r0
 8002800:	460c      	mov	r4, r1
 8002802:	461a      	mov	r2, r3
 8002804:	4bb8      	ldr	r3, [pc, #736]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002806:	fba3 2302 	umull	r2, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	469b      	mov	fp, r3
 8002814:	f04f 0c00 	mov.w	ip, #0
 8002818:	46d9      	mov	r9, fp
 800281a:	46e2      	mov	sl, ip
 800281c:	eb19 0309 	adds.w	r3, r9, r9
 8002820:	eb4a 040a 	adc.w	r4, sl, sl
 8002824:	4699      	mov	r9, r3
 8002826:	46a2      	mov	sl, r4
 8002828:	eb19 090b 	adds.w	r9, r9, fp
 800282c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800283c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002844:	4689      	mov	r9, r1
 8002846:	4692      	mov	sl, r2
 8002848:	eb1b 0509 	adds.w	r5, fp, r9
 800284c:	eb4c 060a 	adc.w	r6, ip, sl
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	0094      	lsls	r4, r2, #2
 8002864:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002868:	008b      	lsls	r3, r1, #2
 800286a:	461a      	mov	r2, r3
 800286c:	4623      	mov	r3, r4
 800286e:	4628      	mov	r0, r5
 8002870:	4631      	mov	r1, r6
 8002872:	f7fd fd0d 	bl	8000290 <__aeabi_uldivmod>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	461a      	mov	r2, r3
 800287c:	4b9a      	ldr	r3, [pc, #616]	; (8002ae8 <UART_SetConfig+0x6f4>)
 800287e:	fba3 1302 	umull	r1, r3, r3, r2
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2164      	movs	r1, #100	; 0x64
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	3332      	adds	r3, #50	; 0x32
 8002890:	4a95      	ldr	r2, [pc, #596]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289c:	4498      	add	r8, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	469b      	mov	fp, r3
 80028a2:	f04f 0c00 	mov.w	ip, #0
 80028a6:	46d9      	mov	r9, fp
 80028a8:	46e2      	mov	sl, ip
 80028aa:	eb19 0309 	adds.w	r3, r9, r9
 80028ae:	eb4a 040a 	adc.w	r4, sl, sl
 80028b2:	4699      	mov	r9, r3
 80028b4:	46a2      	mov	sl, r4
 80028b6:	eb19 090b 	adds.w	r9, r9, fp
 80028ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028d2:	4689      	mov	r9, r1
 80028d4:	4692      	mov	sl, r2
 80028d6:	eb1b 0509 	adds.w	r5, fp, r9
 80028da:	eb4c 060a 	adc.w	r6, ip, sl
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	0094      	lsls	r4, r2, #2
 80028f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028f6:	008b      	lsls	r3, r1, #2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4623      	mov	r3, r4
 80028fc:	4628      	mov	r0, r5
 80028fe:	4631      	mov	r1, r6
 8002900:	f7fd fcc6 	bl	8000290 <__aeabi_uldivmod>
 8002904:	4603      	mov	r3, r0
 8002906:	460c      	mov	r4, r1
 8002908:	461a      	mov	r2, r3
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <UART_SetConfig+0x6f4>)
 800290c:	fba3 1302 	umull	r1, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	3332      	adds	r3, #50	; 0x32
 800291e:	4a72      	ldr	r2, [pc, #456]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	f003 020f 	and.w	r2, r3, #15
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4442      	add	r2, r8
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	e0d0      	b.n	8002ad6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7ff f8d4 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8002938:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	469a      	mov	sl, r3
 800293e:	f04f 0b00 	mov.w	fp, #0
 8002942:	46d0      	mov	r8, sl
 8002944:	46d9      	mov	r9, fp
 8002946:	eb18 0308 	adds.w	r3, r8, r8
 800294a:	eb49 0409 	adc.w	r4, r9, r9
 800294e:	4698      	mov	r8, r3
 8002950:	46a1      	mov	r9, r4
 8002952:	eb18 080a 	adds.w	r8, r8, sl
 8002956:	eb49 090b 	adc.w	r9, r9, fp
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002966:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800296a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800296e:	4688      	mov	r8, r1
 8002970:	4691      	mov	r9, r2
 8002972:	eb1a 0508 	adds.w	r5, sl, r8
 8002976:	eb4b 0609 	adc.w	r6, fp, r9
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	0094      	lsls	r4, r2, #2
 800298e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002992:	008b      	lsls	r3, r1, #2
 8002994:	461a      	mov	r2, r3
 8002996:	4623      	mov	r3, r4
 8002998:	4628      	mov	r0, r5
 800299a:	4631      	mov	r1, r6
 800299c:	f7fd fc78 	bl	8000290 <__aeabi_uldivmod>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <UART_SetConfig+0x6f4>)
 80029a8:	fba3 2302 	umull	r2, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	469b      	mov	fp, r3
 80029b6:	f04f 0c00 	mov.w	ip, #0
 80029ba:	46d9      	mov	r9, fp
 80029bc:	46e2      	mov	sl, ip
 80029be:	eb19 0309 	adds.w	r3, r9, r9
 80029c2:	eb4a 040a 	adc.w	r4, sl, sl
 80029c6:	4699      	mov	r9, r3
 80029c8:	46a2      	mov	sl, r4
 80029ca:	eb19 090b 	adds.w	r9, r9, fp
 80029ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e6:	4689      	mov	r9, r1
 80029e8:	4692      	mov	sl, r2
 80029ea:	eb1b 0509 	adds.w	r5, fp, r9
 80029ee:	eb4c 060a 	adc.w	r6, ip, sl
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	0094      	lsls	r4, r2, #2
 8002a06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a0a:	008b      	lsls	r3, r1, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	4628      	mov	r0, r5
 8002a12:	4631      	mov	r1, r6
 8002a14:	f7fd fc3c 	bl	8000290 <__aeabi_uldivmod>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a2d      	ldr	r2, [pc, #180]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a3e:	4498      	add	r8, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	469b      	mov	fp, r3
 8002a44:	f04f 0c00 	mov.w	ip, #0
 8002a48:	46d9      	mov	r9, fp
 8002a4a:	46e2      	mov	sl, ip
 8002a4c:	eb19 0309 	adds.w	r3, r9, r9
 8002a50:	eb4a 040a 	adc.w	r4, sl, sl
 8002a54:	4699      	mov	r9, r3
 8002a56:	46a2      	mov	sl, r4
 8002a58:	eb19 090b 	adds.w	r9, r9, fp
 8002a5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a74:	4689      	mov	r9, r1
 8002a76:	4692      	mov	sl, r2
 8002a78:	eb1b 0509 	adds.w	r5, fp, r9
 8002a7c:	eb4c 060a 	adc.w	r6, ip, sl
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	f04f 0400 	mov.w	r4, #0
 8002a92:	0094      	lsls	r4, r2, #2
 8002a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a98:	008b      	lsls	r3, r1, #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	4631      	mov	r1, r6
 8002aa2:	f7fd fbf5 	bl	8000290 <__aeabi_uldivmod>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002aae:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2164      	movs	r1, #100	; 0x64
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <UART_SetConfig+0x6f4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4442      	add	r2, r8
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	e7ff      	b.n	8002ad6 <UART_SetConfig+0x6e2>
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae0:	40011000 	.word	0x40011000
 8002ae4:	40011400 	.word	0x40011400
 8002ae8:	51eb851f 	.word	0x51eb851f

08002aec <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002af2:	2306      	movs	r3, #6
 8002af4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002af6:	2306      	movs	r3, #6
 8002af8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	83fb      	strh	r3, [r7, #30]
 8002b02:	2300      	movs	r3, #0
 8002b04:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8002b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002b10:	4b9f      	ldr	r3, [pc, #636]	; (8002d90 <EE_Init+0x2a4>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002b16:	4b9f      	ldr	r3, [pc, #636]	; (8002d94 <EE_Init+0x2a8>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8002b20:	2302      	movs	r3, #2
 8002b22:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8002b2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b2e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d057      	beq.n	8002be6 <EE_Init+0xfa>
 8002b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <EE_Init+0x5a>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80f4 	beq.w	8002d2c <EE_Init+0x240>
 8002b44:	e18d      	b.n	8002e62 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002b46:	8c3b      	ldrh	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002b4c:	4890      	ldr	r0, [pc, #576]	; (8002d90 <EE_Init+0x2a4>)
 8002b4e:	f000 f9a9 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f040 818e 	bne.w	8002e76 <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002b5a:	f107 0214 	add.w	r2, r7, #20
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f8ac 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002b6c:	7efb      	ldrb	r3, [r7, #27]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8181 	beq.w	8002e76 <EE_Init+0x38a>
          {
            return FlashStatus;
 8002b74:	7efb      	ldrb	r3, [r7, #27]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	e185      	b.n	8002e86 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002b7a:	8c3b      	ldrh	r3, [r7, #32]
 8002b7c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d125      	bne.n	8002bd0 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002b84:	4882      	ldr	r0, [pc, #520]	; (8002d90 <EE_Init+0x2a4>)
 8002b86:	f000 f98d 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002b90:	f107 0214 	add.w	r2, r7, #20
 8002b94:	463b      	mov	r3, r7
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f891 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ba2:	7efb      	ldrb	r3, [r7, #27]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <EE_Init+0xc2>
          {
            return FlashStatus;
 8002ba8:	7efb      	ldrb	r3, [r7, #27]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	e16b      	b.n	8002e86 <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	4977      	ldr	r1, [pc, #476]	; (8002d94 <EE_Init+0x2a8>)
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fd fecd 	bl	8000958 <HAL_FLASH_Program>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002bc2:	7efb      	ldrb	r3, [r7, #27]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8156 	beq.w	8002e76 <EE_Init+0x38a>
        {
          return FlashStatus;
 8002bca:	7efb      	ldrb	r3, [r7, #27]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	e15a      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002bd0:	f000 f9d8 	bl	8002f84 <EE_Format>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002bd8:	7efb      	ldrb	r3, [r7, #27]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 814b 	beq.w	8002e76 <EE_Init+0x38a>
        {
          return FlashStatus;
 8002be0:	7efb      	ldrb	r3, [r7, #27]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	e14f      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002be6:	8c3b      	ldrh	r3, [r7, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d163      	bne.n	8002cb4 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002bf0:	e030      	b.n	8002c54 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002bf2:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <EE_Init+0x2ac>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bfa:	4968      	ldr	r1, [pc, #416]	; (8002d9c <EE_Init+0x2b0>)
 8002bfc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d101      	bne.n	8002c08 <EE_Init+0x11c>
          {
            x = VarIdx;
 8002c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c06:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8002c08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c0a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d01d      	beq.n	8002c4e <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002c12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c14:	4a61      	ldr	r2, [pc, #388]	; (8002d9c <EE_Init+0x2b0>)
 8002c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c1a:	4961      	ldr	r1, [pc, #388]	; (8002da0 <EE_Init+0x2b4>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f967 	bl	8002ef0 <EE_ReadVariable>
 8002c22:	4603      	mov	r3, r0
 8002c24:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002c26:	8bbb      	ldrh	r3, [r7, #28]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d010      	beq.n	8002c4e <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c2e:	4a5b      	ldr	r2, [pc, #364]	; (8002d9c <EE_Init+0x2b0>)
 8002c30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <EE_Init+0x2b4>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 fa3a 	bl	80030b4 <EE_VerifyPageFullWriteVariable>
 8002c40:	4603      	mov	r3, r0
 8002c42:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002c44:	8bfb      	ldrh	r3, [r7, #30]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <EE_Init+0x162>
              {
                return EepromStatus;
 8002c4a:	8bfb      	ldrh	r3, [r7, #30]
 8002c4c:	e11b      	b.n	8002e86 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002c4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c50:	3301      	adds	r3, #1
 8002c52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d9cb      	bls.n	8002bf2 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	494b      	ldr	r1, [pc, #300]	; (8002d90 <EE_Init+0x2a4>)
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7fd fe77 	bl	8000958 <HAL_FLASH_Program>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002c6e:	7efb      	ldrb	r3, [r7, #27]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <EE_Init+0x18e>
        {
          return FlashStatus;
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	e105      	b.n	8002e86 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002c82:	2302      	movs	r3, #2
 8002c84:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002c86:	4843      	ldr	r0, [pc, #268]	; (8002d94 <EE_Init+0x2a8>)
 8002c88:	f000 f90c 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80f3 	bne.w	8002e7a <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002c94:	f107 0214 	add.w	r2, r7, #20
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe f80f 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ca6:	7efb      	ldrb	r3, [r7, #27]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80e6 	beq.w	8002e7a <EE_Init+0x38e>
          {
            return FlashStatus;
 8002cae:	7efb      	ldrb	r3, [r7, #27]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	e0e8      	b.n	8002e86 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002cb4:	8c3b      	ldrh	r3, [r7, #32]
 8002cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12b      	bne.n	8002d16 <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002cca:	4832      	ldr	r0, [pc, #200]	; (8002d94 <EE_Init+0x2a8>)
 8002ccc:	f000 f8ea 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002cd6:	f107 0214 	add.w	r2, r7, #20
 8002cda:	463b      	mov	r3, r7
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd ffee 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002ce8:	7efb      	ldrb	r3, [r7, #27]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <EE_Init+0x208>
          {
            return FlashStatus;
 8002cee:	7efb      	ldrb	r3, [r7, #27]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	e0c8      	b.n	8002e86 <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	4924      	ldr	r1, [pc, #144]	; (8002d90 <EE_Init+0x2a4>)
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7fd fe2a 	bl	8000958 <HAL_FLASH_Program>
 8002d04:	4603      	mov	r3, r0
 8002d06:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002d08:	7efb      	ldrb	r3, [r7, #27]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80b5 	beq.w	8002e7a <EE_Init+0x38e>
        {
          return FlashStatus;
 8002d10:	7efb      	ldrb	r3, [r7, #27]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	e0b7      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002d16:	f000 f935 	bl	8002f84 <EE_Format>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002d1e:	7efb      	ldrb	r3, [r7, #27]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80aa 	beq.w	8002e7a <EE_Init+0x38e>
        {
          return FlashStatus;
 8002d26:	7efb      	ldrb	r3, [r7, #27]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	e0ac      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002d2c:	8c3b      	ldrh	r3, [r7, #32]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002d32:	f000 f927 	bl	8002f84 <EE_Format>
 8002d36:	4603      	mov	r3, r0
 8002d38:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 809e 	beq.w	8002e7e <EE_Init+0x392>
        {
          return FlashStatus;
 8002d42:	7efb      	ldrb	r3, [r7, #27]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	e09e      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002d48:	8c3b      	ldrh	r3, [r7, #32]
 8002d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d11b      	bne.n	8002d8a <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002d52:	2303      	movs	r3, #3
 8002d54:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002d5e:	480d      	ldr	r0, [pc, #52]	; (8002d94 <EE_Init+0x2a8>)
 8002d60:	f000 f8a0 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 8089 	bne.w	8002e7e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002d6c:	f107 0214 	add.w	r2, r7, #20
 8002d70:	463b      	mov	r3, r7
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd ffa3 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002d7e:	7efb      	ldrb	r3, [r7, #27]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d07c      	beq.n	8002e7e <EE_Init+0x392>
          {
            return FlashStatus;
 8002d84:	7efb      	ldrb	r3, [r7, #27]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	e07d      	b.n	8002e86 <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d8e:	e03a      	b.n	8002e06 <EE_Init+0x31a>
 8002d90:	08008000 	.word	0x08008000
 8002d94:	0800c000 	.word	0x0800c000
 8002d98:	08008006 	.word	0x08008006
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	20000208 	.word	0x20000208
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <EE_Init+0x3a4>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dac:	4939      	ldr	r1, [pc, #228]	; (8002e94 <EE_Init+0x3a8>)
 8002dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d101      	bne.n	8002dba <EE_Init+0x2ce>
          {
            x = VarIdx;
 8002db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002db8:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8002dba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002dbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d01d      	beq.n	8002e00 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dc6:	4a33      	ldr	r2, [pc, #204]	; (8002e94 <EE_Init+0x3a8>)
 8002dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dcc:	4932      	ldr	r1, [pc, #200]	; (8002e98 <EE_Init+0x3ac>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f88e 	bl	8002ef0 <EE_ReadVariable>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002dd8:	8bbb      	ldrh	r3, [r7, #28]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d010      	beq.n	8002e00 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002dde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002de0:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <EE_Init+0x3a8>)
 8002de2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <EE_Init+0x3ac>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 f961 	bl	80030b4 <EE_VerifyPageFullWriteVariable>
 8002df2:	4603      	mov	r3, r0
 8002df4:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002df6:	8bfb      	ldrh	r3, [r7, #30]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <EE_Init+0x314>
              {
                return EepromStatus;
 8002dfc:	8bfb      	ldrh	r3, [r7, #30]
 8002dfe:	e042      	b.n	8002e86 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e02:	3301      	adds	r3, #1
 8002e04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d9cb      	bls.n	8002da4 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	4921      	ldr	r1, [pc, #132]	; (8002e9c <EE_Init+0x3b0>)
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fd fd9e 	bl	8000958 <HAL_FLASH_Program>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002e20:	7efb      	ldrb	r3, [r7, #27]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <EE_Init+0x340>
        {
          return FlashStatus;
 8002e26:	7efb      	ldrb	r3, [r7, #27]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	e02c      	b.n	8002e86 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002e34:	2302      	movs	r3, #2
 8002e36:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002e38:	4819      	ldr	r0, [pc, #100]	; (8002ea0 <EE_Init+0x3b4>)
 8002e3a:	f000 f833 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11c      	bne.n	8002e7e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002e44:	f107 0214 	add.w	r2, r7, #20
 8002e48:	463b      	mov	r3, r7
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd ff37 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002e52:	4603      	mov	r3, r0
 8002e54:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002e56:	7efb      	ldrb	r3, [r7, #27]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <EE_Init+0x392>
          {
            return FlashStatus;
 8002e5c:	7efb      	ldrb	r3, [r7, #27]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	e011      	b.n	8002e86 <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8002e62:	f000 f88f 	bl	8002f84 <EE_Format>
 8002e66:	4603      	mov	r3, r0
 8002e68:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8002e6a:	7efb      	ldrb	r3, [r7, #27]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <EE_Init+0x396>
      {
        return FlashStatus;
 8002e70:	7efb      	ldrb	r3, [r7, #27]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	e007      	b.n	8002e86 <EE_Init+0x39a>
      break;
 8002e76:	bf00      	nop
 8002e78:	e004      	b.n	8002e84 <EE_Init+0x398>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e002      	b.n	8002e84 <EE_Init+0x398>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <EE_Init+0x398>
      }
      break;
 8002e82:	bf00      	nop
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3728      	adds	r7, #40	; 0x28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	0800c006 	.word	0x0800c006
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	20000208 	.word	0x20000208
 8002e9c:	0800c000 	.word	0x0800c000
 8002ea0:	08008000 	.word	0x08008000

08002ea4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8002eb0:	f245 5355 	movw	r3, #21845	; 0x5555
 8002eb4:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8002eb6:	e00d      	b.n	8002ed4 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d002      	beq.n	8002ece <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

      break;
 8002ecc:	e006      	b.n	8002edc <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <EE_VerifyPageFullyErased+0x48>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d9ed      	bls.n	8002eb8 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	b29b      	uxth	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	0800bfff 	.word	0x0800bfff

08002ef0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8002f00:	f245 5355 	movw	r3, #21845	; 0x5555
 8002f04:	81bb      	strh	r3, [r7, #12]
 8002f06:	2301      	movs	r3, #1
 8002f08:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <EE_ReadVariable+0x8c>)
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <EE_ReadVariable+0x8c>)
 8002f10:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f000 f888 	bl	8003028 <EE_FindValidPage>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	2bab      	cmp	r3, #171	; 0xab
 8002f20:	d101      	bne.n	8002f26 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8002f22:	23ab      	movs	r3, #171	; 0xab
 8002f24:	e025      	b.n	8002f72 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002f26:	89fb      	ldrh	r3, [r7, #14]
 8002f28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	039b      	lsls	r3, r3, #14
 8002f30:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	3301      	adds	r3, #1
 8002f36:	039a      	lsls	r2, r3, #14
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <EE_ReadVariable+0x90>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8002f3e:	e012      	b.n	8002f66 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8002f46:	89ba      	ldrh	r2, [r7, #12]
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d108      	bne.n	8002f60 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3b02      	subs	r3, #2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	82fb      	strh	r3, [r7, #22]

      break;
 8002f5e:	e007      	b.n	8002f70 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3b04      	subs	r3, #4
 8002f64:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8e7      	bhi.n	8002f40 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8002f70:	8afb      	ldrh	r3, [r7, #22]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08008000 	.word	0x08008000
 8002f80:	08007ffe 	.word	0x08007ffe

08002f84 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8002f96:	2302      	movs	r3, #2
 8002f98:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002fa2:	481f      	ldr	r0, [pc, #124]	; (8003020 <EE_Format+0x9c>)
 8002fa4:	f7ff ff7e 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002fae:	f107 0218 	add.w	r2, r7, #24
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fe82 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <EE_Format+0x46>
    {
      return FlashStatus;
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	e025      	b.n	8003016 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	4913      	ldr	r1, [pc, #76]	; (8003020 <EE_Format+0x9c>)
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7fd fcbf 	bl	8000958 <HAL_FLASH_Program>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <EE_Format+0x64>
  {
    return FlashStatus;
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	e016      	b.n	8003016 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002fec:	480d      	ldr	r0, [pc, #52]	; (8003024 <EE_Format+0xa0>)
 8002fee:	f7ff ff59 	bl	8002ea4 <EE_VerifyPageFullyErased>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002ff8:	f107 0218 	add.w	r2, r7, #24
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fe5d 	bl	8000cc0 <HAL_FLASHEx_Erase>
 8003006:	4603      	mov	r3, r0
 8003008:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <EE_Format+0x90>
    {
      return FlashStatus;
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	e000      	b.n	8003016 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08008000 	.word	0x08008000
 8003024:	0800c000 	.word	0x0800c000

08003028 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8003032:	2306      	movs	r3, #6
 8003034:	81fb      	strh	r3, [r7, #14]
 8003036:	2306      	movs	r3, #6
 8003038:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <EE_FindValidPage+0x84>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <EE_FindValidPage+0x88>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <EE_FindValidPage+0x5c>
 800304c:	2b01      	cmp	r3, #1
 800304e:	d125      	bne.n	800309c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8003050:	89bb      	ldrh	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8003060:	2300      	movs	r3, #0
 8003062:	e01c      	b.n	800309e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8003064:	2301      	movs	r3, #1
 8003066:	e01a      	b.n	800309e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800306e:	89bb      	ldrh	r3, [r7, #12]
 8003070:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8003078:	2301      	movs	r3, #1
 800307a:	e010      	b.n	800309e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800307c:	2300      	movs	r3, #0
 800307e:	e00e      	b.n	800309e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8003080:	23ab      	movs	r3, #171	; 0xab
 8003082:	e00c      	b.n	800309e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800308a:	2300      	movs	r3, #0
 800308c:	e007      	b.n	800309e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800308e:	89bb      	ldrh	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8003094:	2301      	movs	r3, #1
 8003096:	e002      	b.n	800309e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8003098:	23ab      	movs	r3, #171	; 0xab
 800309a:	e000      	b.n	800309e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800309c:	2300      	movs	r3, #0
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	08008000 	.word	0x08008000
 80030b0:	0800c000 	.word	0x0800c000

080030b4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	80fb      	strh	r3, [r7, #6]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <EE_VerifyPageFullWriteVariable+0xb0>)
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <EE_VerifyPageFullWriteVariable+0xb4>)
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7ff ffa7 	bl	8003028 <EE_FindValidPage>
 80030da:	4603      	mov	r3, r0
 80030dc:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80030de:	8a3b      	ldrh	r3, [r7, #16]
 80030e0:	2bab      	cmp	r3, #171	; 0xab
 80030e2:	d101      	bne.n	80030e8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80030e4:	23ab      	movs	r3, #171	; 0xab
 80030e6:	e039      	b.n	800315c <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80030e8:	8a3b      	ldrh	r3, [r7, #16]
 80030ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030ee:	3302      	adds	r3, #2
 80030f0:	039b      	lsls	r3, r3, #14
 80030f2:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80030f4:	8a3b      	ldrh	r3, [r7, #16]
 80030f6:	3301      	adds	r3, #1
 80030f8:	039a      	lsls	r2, r3, #14
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <EE_VerifyPageFullWriteVariable+0xb8>)
 80030fc:	4413      	add	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8003100:	e027      	b.n	8003152 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d11f      	bne.n	800314c <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	f04f 0400 	mov.w	r4, #0
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	2001      	movs	r0, #1
 800311a:	f7fd fc1d 	bl	8000958 <HAL_FLASH_Program>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	b29b      	uxth	r3, r3
 800312c:	e016      	b.n	800315c <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1c99      	adds	r1, r3, #2
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	2001      	movs	r0, #1
 800313e:	f7fd fc0b 	bl	8000958 <HAL_FLASH_Program>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	b29b      	uxth	r3, r3
 800314a:	e007      	b.n	800315c <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3304      	adds	r3, #4
 8003150:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3d3      	bcc.n	8003102 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800315a:	2380      	movs	r3, #128	; 0x80
}
 800315c:	4618      	mov	r0, r3
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	08008000 	.word	0x08008000
 8003168:	0800c000 	.word	0x0800c000
 800316c:	08007fff 	.word	0x08007fff

08003170 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8003178:	1d39      	adds	r1, r7, #4
 800317a:	2364      	movs	r3, #100	; 0x64
 800317c:	2201      	movs	r2, #1
 800317e:	4804      	ldr	r0, [pc, #16]	; (8003190 <__io_putchar+0x20>)
 8003180:	f7fe fd23 	bl	8001bca <HAL_UART_Transmit>


 return ch;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000030c 	.word	0x2000030c

08003194 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (huart->Instance == USART1){
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_UART_RxCpltCallback+0x90>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d139      	bne.n	800321a <HAL_UART_RxCpltCallback+0x86>
		if((uint8_t*)(Rx_data[0] >> 8) != 0x0d && (uint8_t*)(Rx_data[0] >> 8) != 0x0a && (uint8_t*)(Rx_data[0] >> 8) != 0x52 && (uint8_t*)Rx_data[0] != 0x0d && (uint8_t*)Rx_data[0] != 0x0a&& (uint8_t*)Rx_data[0] != 0x52) {
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b0d      	cmp	r3, #13
 80031b0:	d033      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b0a      	cmp	r3, #10
 80031bc:	d02d      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b52      	cmp	r3, #82	; 0x52
 80031c8:	d027      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2b0d      	cmp	r3, #13
 80031d0:	d023      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b0a      	cmp	r3, #10
 80031d8:	d01f      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	2b52      	cmp	r3, #82	; 0x52
 80031e0:	d01b      	beq.n	800321a <HAL_UART_RxCpltCallback+0x86>

		uint16_t test_rx[2];
		test_rx[0] = Rx_data[0];
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	81bb      	strh	r3, [r7, #12]
		//test_rx[1] = Rx_data[1];
		Address = Address + 2;
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_UART_RxCpltCallback+0x98>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3302      	adds	r3, #2
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_UART_RxCpltCallback+0x98>)
 80031f0:	6013      	str	r3, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address, Rx_data[0] );
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_UART_RxCpltCallback+0x98>)
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_UART_RxCpltCallback+0x94>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f04f 0400 	mov.w	r4, #0
 8003200:	461a      	mov	r2, r3
 8003202:	4623      	mov	r3, r4
 8003204:	2001      	movs	r0, #1
 8003206:	f7fd fba7 	bl	8000958 <HAL_FLASH_Program>
		HAL_UART_Transmit(&huart1,(uint8_t*)&test_rx, 1,0xFFFF);
 800320a:	f107 010c 	add.w	r1, r7, #12
 800320e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003212:	2201      	movs	r2, #1
 8003214:	4806      	ldr	r0, [pc, #24]	; (8003230 <HAL_UART_RxCpltCallback+0x9c>)
 8003216:	f7fe fcd8 	bl	8001bca <HAL_UART_Transmit>

		}
	}
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	bf00      	nop
 8003224:	40011000 	.word	0x40011000
 8003228:	200002c4 	.word	0x200002c4
 800322c:	20000008 	.word	0x20000008
 8003230:	200002cc 	.word	0x200002cc

08003234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003238:	f7fd f9aa 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800323c:	f000 f86a 	bl	8003314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003240:	f000 f93a 	bl	80034b8 <MX_GPIO_Init>
  MX_CRC_Init();
 8003244:	f000 f8d0 	bl	80033e8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8003248:	f000 f8e2 	bl	8003410 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800324c:	f000 f90a 	bl	8003464 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(setBUSmode(BUS_COMMAND_MODE) == -1){
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <main+0xbc>)
 8003252:	f000 fd43 	bl	8003cdc <setBUSmode>
 8003256:	4603      	mov	r3, r0
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d109      	bne.n	8003272 <main+0x3e>
	  HAL_UART_Transmit(&huart1, (uint8_t*) "Failed", 8, 0xFFFF);
 800325e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003262:	2208      	movs	r2, #8
 8003264:	4923      	ldr	r1, [pc, #140]	; (80032f4 <main+0xc0>)
 8003266:	4824      	ldr	r0, [pc, #144]	; (80032f8 <main+0xc4>)
 8003268:	f7fe fcaf 	bl	8001bca <HAL_UART_Transmit>
	  printf("Failed");
 800326c:	4821      	ldr	r0, [pc, #132]	; (80032f4 <main+0xc0>)
 800326e:	f000 fe11 	bl	8003e94 <iprintf>
  }
  HAL_Delay(2000);
 8003272:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003276:	f7fd f9fd 	bl	8000674 <HAL_Delay>
  setCmdMode(MACHINE_MODE);
 800327a:	4820      	ldr	r0, [pc, #128]	; (80032fc <main+0xc8>)
 800327c:	f000 fb76 	bl	800396c <setCmdMode>
  HAL_Delay(100);
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	f7fd f9f7 	bl	8000674 <HAL_Delay>
  setupNetwork(WIFI_SSID,WIFI_PASS);
 8003286:	491e      	ldr	r1, [pc, #120]	; (8003300 <main+0xcc>)
 8003288:	481e      	ldr	r0, [pc, #120]	; (8003304 <main+0xd0>)
 800328a:	f000 fc0b 	bl	8003aa4 <setupNetwork>
  HAL_Delay(100);
 800328e:	2064      	movs	r0, #100	; 0x64
 8003290:	f7fd f9f0 	bl	8000674 <HAL_Delay>
  setAutoJoinWifi(ENABLE);
 8003294:	2001      	movs	r0, #1
 8003296:	f000 fc5d 	bl	8003b54 <setAutoJoinWifi>
  HAL_Delay(100);
 800329a:	2064      	movs	r0, #100	; 0x64
 800329c:	f7fd f9ea 	bl	8000674 <HAL_Delay>
  setAutostartTCP(ENABLE);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f000 fce5 	bl	8003c70 <setAutostartTCP>
  HAL_Delay(100);
 80032a6:	2064      	movs	r0, #100	; 0x64
 80032a8:	f7fd f9e4 	bl	8000674 <HAL_Delay>
  setTCPServer(TCP_PORT,300);
 80032ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80032b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80032b4:	f000 fc84 	bl	8003bc0 <setTCPServer>
  HAL_Delay(100);
 80032b8:	2064      	movs	r0, #100	; 0x64
 80032ba:	f7fd f9db 	bl	8000674 <HAL_Delay>
  setBUSmode(BUS_STREAM_MODE);
 80032be:	4812      	ldr	r0, [pc, #72]	; (8003308 <main+0xd4>)
 80032c0:	f000 fd0c 	bl	8003cdc <setBUSmode>
  HAL_Delay(2000);
 80032c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032c8:	f7fd f9d4 	bl	8000674 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, Rx_data, 2);
 80032cc:	2202      	movs	r2, #2
 80032ce:	490f      	ldr	r1, [pc, #60]	; (800330c <main+0xd8>)
 80032d0:	4809      	ldr	r0, [pc, #36]	; (80032f8 <main+0xc4>)
 80032d2:	f7fe fdb9 	bl	8001e48 <HAL_UART_Receive_IT>
  EE_Init();
 80032d6:	f7ff fc09 	bl	8002aec <EE_Init>
  HAL_FLASH_Unlock();
 80032da:	f7fd fb91 	bl	8000a00 <HAL_FLASH_Unlock>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80032de:	2120      	movs	r1, #32
 80032e0:	480b      	ldr	r0, [pc, #44]	; (8003310 <main+0xdc>)
 80032e2:	f7fd ffaa 	bl	800123a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80032e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ea:	f7fd f9c3 	bl	8000674 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80032ee:	e7f6      	b.n	80032de <main+0xaa>
 80032f0:	08005168 	.word	0x08005168
 80032f4:	08005170 	.word	0x08005170
 80032f8:	200002cc 	.word	0x200002cc
 80032fc:	08005178 	.word	0x08005178
 8003300:	08005180 	.word	0x08005180
 8003304:	0800518c 	.word	0x0800518c
 8003308:	08005194 	.word	0x08005194
 800330c:	200002c4 	.word	0x200002c4
 8003310:	40020000 	.word	0x40020000

08003314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b094      	sub	sp, #80	; 0x50
 8003318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	2230      	movs	r2, #48	; 0x30
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fdae 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <SystemClock_Config+0xcc>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <SystemClock_Config+0xcc>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <SystemClock_Config+0xcc>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003354:	2300      	movs	r3, #0
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <SystemClock_Config+0xd0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <SystemClock_Config+0xd0>)
 800335e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <SystemClock_Config+0xd0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003374:	2301      	movs	r3, #1
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003378:	2310      	movs	r3, #16
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800337c:	2302      	movs	r3, #2
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003380:	2300      	movs	r3, #0
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003384:	2310      	movs	r3, #16
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003388:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800338e:	2304      	movs	r3, #4
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003392:	2304      	movs	r3, #4
 8003394:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd ff8c 	bl	80012b8 <HAL_RCC_OscConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80033a6:	f000 f903 	bl	80035b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033aa:	230f      	movs	r3, #15
 80033ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033ae:	2302      	movs	r3, #2
 80033b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	2102      	movs	r1, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe f9e6 	bl	8001798 <HAL_RCC_ClockConfig>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80033d2:	f000 f8ed 	bl	80035b0 <Error_Handler>
  }
}
 80033d6:	bf00      	nop
 80033d8:	3750      	adds	r7, #80	; 0x50
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000

080033e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <MX_CRC_Init+0x20>)
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <MX_CRC_Init+0x24>)
 80033f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033f2:	4805      	ldr	r0, [pc, #20]	; (8003408 <MX_CRC_Init+0x20>)
 80033f4:	f7fd fa71 	bl	80008da <HAL_CRC_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80033fe:	f000 f8d7 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200002bc 	.word	0x200002bc
 800340c:	40023000 	.word	0x40023000

08003410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <MX_USART1_UART_Init+0x50>)
 8003418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <MX_USART1_UART_Init+0x4c>)
 800341c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <MX_USART1_UART_Init+0x4c>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003436:	220c      	movs	r2, #12
 8003438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <MX_USART1_UART_Init+0x4c>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003446:	4805      	ldr	r0, [pc, #20]	; (800345c <MX_USART1_UART_Init+0x4c>)
 8003448:	f7fe fb72 	bl	8001b30 <HAL_UART_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003452:	f000 f8ad 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200002cc 	.word	0x200002cc
 8003460:	40011000 	.word	0x40011000

08003464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <MX_USART2_UART_Init+0x50>)
 800346c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 8003470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 800348a:	220c      	movs	r2, #12
 800348c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800349a:	4805      	ldr	r0, [pc, #20]	; (80034b0 <MX_USART2_UART_Init+0x4c>)
 800349c:	f7fe fb48 	bl	8001b30 <HAL_UART_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034a6:	f000 f883 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000030c 	.word	0x2000030c
 80034b4:	40004400 	.word	0x40004400

080034b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	6313      	str	r3, [r2, #48]	; 0x30
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <MX_GPIO_Init+0xe8>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <MX_GPIO_Init+0xe8>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <MX_GPIO_Init+0xe8>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <MX_GPIO_Init+0xe8>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003522:	2200      	movs	r2, #0
 8003524:	2120      	movs	r1, #32
 8003526:	481f      	ldr	r0, [pc, #124]	; (80035a4 <MX_GPIO_Init+0xec>)
 8003528:	f7fd fe6e 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800352c:	2308      	movs	r3, #8
 800352e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <MX_GPIO_Init+0xf0>)
 8003532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	4619      	mov	r1, r3
 800353e:	481b      	ldr	r0, [pc, #108]	; (80035ac <MX_GPIO_Init+0xf4>)
 8003540:	f7fd fce0 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003544:	2320      	movs	r3, #32
 8003546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	4619      	mov	r1, r3
 800355a:	4812      	ldr	r0, [pc, #72]	; (80035a4 <MX_GPIO_Init+0xec>)
 800355c:	f7fd fcd2 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <MX_GPIO_Init+0xf0>)
 8003566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	4619      	mov	r1, r3
 8003572:	480c      	ldr	r0, [pc, #48]	; (80035a4 <MX_GPIO_Init+0xec>)
 8003574:	f7fd fcc6 	bl	8000f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	2009      	movs	r0, #9
 800357e:	f7fd f976 	bl	800086e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003582:	2009      	movs	r0, #9
 8003584:	f7fd f98f 	bl	80008a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	2017      	movs	r0, #23
 800358e:	f7fd f96e 	bl	800086e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003592:	2017      	movs	r0, #23
 8003594:	f7fd f987 	bl	80008a6 <HAL_NVIC_EnableIRQ>

}
 8003598:	bf00      	nop
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020000 	.word	0x40020000
 80035a8:	10110000 	.word	0x10110000
 80035ac:	40020800 	.word	0x40020800

080035b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_MspInit+0x4c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_MspInit+0x4c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_MspInit+0x4c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_MspInit+0x4c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_MspInit+0x4c>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_MspInit+0x4c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0b      	ldr	r2, [pc, #44]	; (800364c <HAL_CRC_MspInit+0x3c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10d      	bne.n	800363e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_CRC_MspInit+0x40>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_CRC_MspInit+0x40>)
 800362c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_CRC_MspInit+0x40>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023000 	.word	0x40023000
 8003650:	40023800 	.word	0x40023800

08003654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_UART_MspInit+0x108>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d135      	bne.n	80036e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_UART_MspInit+0x10c>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <HAL_UART_MspInit+0x10c>)
 8003680:	f043 0310 	orr.w	r3, r3, #16
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <HAL_UART_MspInit+0x10c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_UART_MspInit+0x10c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a31      	ldr	r2, [pc, #196]	; (8003760 <HAL_UART_MspInit+0x10c>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_UART_MspInit+0x10c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036bc:	2303      	movs	r3, #3
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036c0:	2307      	movs	r3, #7
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	f107 031c 	add.w	r3, r7, #28
 80036c8:	4619      	mov	r1, r3
 80036ca:	4826      	ldr	r0, [pc, #152]	; (8003764 <HAL_UART_MspInit+0x110>)
 80036cc:	f7fd fc1a 	bl	8000f04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	2025      	movs	r0, #37	; 0x25
 80036d6:	f7fd f8ca 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036da:	2025      	movs	r0, #37	; 0x25
 80036dc:	f7fd f8e3 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036e0:	e038      	b.n	8003754 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_UART_MspInit+0x114>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d133      	bne.n	8003754 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_UART_MspInit+0x10c>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_UART_MspInit+0x10c>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_UART_MspInit+0x10c>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_UART_MspInit+0x10c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_UART_MspInit+0x10c>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6313      	str	r3, [r2, #48]	; 0x30
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_UART_MspInit+0x10c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003724:	230c      	movs	r3, #12
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003734:	2307      	movs	r3, #7
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	4619      	mov	r1, r3
 800373e:	4809      	ldr	r0, [pc, #36]	; (8003764 <HAL_UART_MspInit+0x110>)
 8003740:	f7fd fbe0 	bl	8000f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	2026      	movs	r0, #38	; 0x26
 800374a:	f7fd f890 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800374e:	2026      	movs	r0, #38	; 0x26
 8003750:	f7fd f8a9 	bl	80008a6 <HAL_NVIC_EnableIRQ>
}
 8003754:	bf00      	nop
 8003756:	3730      	adds	r7, #48	; 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40011000 	.word	0x40011000
 8003760:	40023800 	.word	0x40023800
 8003764:	40020000 	.word	0x40020000
 8003768:	40004400 	.word	0x40004400

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <HardFault_Handler+0x4>

08003780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <MemManage_Handler+0x4>

08003786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <BusFault_Handler+0x4>

0800378c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <UsageFault_Handler+0x4>

08003792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c0:	f7fc ff38 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80037cc:	2008      	movs	r0, #8
 80037ce:	f7fd fd4f 	bl	8001270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80037da:	2080      	movs	r0, #128	; 0x80
 80037dc:	f7fd fd48 	bl	8001270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <USART1_IRQHandler+0x10>)
 80037ea:	f7fe fb83 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200002cc 	.word	0x200002cc

080037f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <USART2_IRQHandler+0x10>)
 80037fe:	f7fe fb79 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000030c 	.word	0x2000030c

0800380c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e00a      	b.n	8003834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800381e:	f3af 8000 	nop.w
 8003822:	4601      	mov	r1, r0
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	b2ca      	uxtb	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	dbf0      	blt.n	800381e <_read+0x12>
	}

return len;
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e009      	b.n	800386c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	60ba      	str	r2, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fc85 	bl	8003170 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	dbf1      	blt.n	8003858 <_write+0x12>
	}
	return len;
 8003874:	687b      	ldr	r3, [r7, #4]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <_close>:

int _close(int file)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	return -1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038a6:	605a      	str	r2, [r3, #4]
	return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_isatty>:

int _isatty(int file)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
	return 1;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <_sbrk+0x50>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <_sbrk+0x16>
		heap_end = &end;
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <_sbrk+0x50>)
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <_sbrk+0x54>)
 80038fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <_sbrk+0x50>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <_sbrk+0x50>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	466a      	mov	r2, sp
 800390e:	4293      	cmp	r3, r2
 8003910:	d907      	bls.n	8003922 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003912:	f000 fa8d 	bl	8003e30 <__errno>
 8003916:	4602      	mov	r2, r0
 8003918:	230c      	movs	r3, #12
 800391a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	e006      	b.n	8003930 <_sbrk+0x48>
	}

	heap_end += incr;
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <_sbrk+0x50>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	4a03      	ldr	r2, [pc, #12]	; (8003938 <_sbrk+0x50>)
 800392c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000020c 	.word	0x2000020c
 800393c:	20000350 	.word	0x20000350

08003940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <SystemInit+0x28>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	4a07      	ldr	r2, [pc, #28]	; (8003968 <SystemInit+0x28>)
 800394c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SystemInit+0x28>)
 8003956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800395a:	609a      	str	r2, [r3, #8]
#endif
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <setCmdMode>:

extern UART_HandleTypeDef huart1;
static uint8_t wifi_command[128];
UART_HandleTypeDef *wifi_uart = &huart1;

int setCmdMode(const char *mode){
 800396c:	b580      	push	{r7, lr}
 800396e:	b0a4      	sub	sp, #144	; 0x90
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	size_t command_len;
	uint8_t resp_buff[128] = { 0 };
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fa81 	bl	8003e84 <memset>
	sprintf((unsigned char*)wifi_command, "set sy c f %s\r\n", mode);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4911      	ldr	r1, [pc, #68]	; (80039cc <setCmdMode+0x60>)
 8003986:	4812      	ldr	r0, [pc, #72]	; (80039d0 <setCmdMode+0x64>)
 8003988:	f000 fa9c 	bl	8003ec4 <siprintf>
	command_len = strlen((char*)wifi_command);
 800398c:	4810      	ldr	r0, [pc, #64]	; (80039d0 <setCmdMode+0x64>)
 800398e:	f7fc fc27 	bl	80001e0 <strlen>
 8003992:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <setCmdMode+0x68>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800399e:	b29a      	uxth	r2, r3
 80039a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a4:	490a      	ldr	r1, [pc, #40]	; (80039d0 <setCmdMode+0x64>)
 80039a6:	f7fe f910 	bl	8001bca <HAL_UART_Transmit>
	if(getCmdResponse(resp_buff)<0)
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f812 	bl	80039d8 <getCmdResponse>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da02      	bge.n	80039c0 <setCmdMode+0x54>
		return -1;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	e000      	b.n	80039c2 <setCmdMode+0x56>
	else
		return 0;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3790      	adds	r7, #144	; 0x90
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800519c 	.word	0x0800519c
 80039d0:	20000210 	.word	0x20000210
 80039d4:	20000018 	.word	0x20000018

080039d8 <getCmdResponse>:

int getCmdResponse(unsigned char* uart_reponse)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    uint8_t header[16] = { 0 };
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
    uint8_t error_code[1];
    int rc = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_UART_Receive(wifi_uart, (uint8_t*)header, 9, 0xFFFF);
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <getCmdResponse+0xc0>)
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	f107 0114 	add.w	r1, r7, #20
 80039fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039fe:	2209      	movs	r2, #9
 8003a00:	f7fe f97c 	bl	8001cfc <HAL_UART_Receive>

    if(header[0] == 'R')
 8003a04:	7d3b      	ldrb	r3, [r7, #20]
 8003a06:	2b52      	cmp	r3, #82	; 0x52
 8003a08:	d13a      	bne.n	8003a80 <getCmdResponse+0xa8>
    {
    	if(header[1] == '0')
 8003a0a:	7d7b      	ldrb	r3, [r7, #21]
 8003a0c:	2b30      	cmp	r3, #48	; 0x30
 8003a0e:	d122      	bne.n	8003a56 <getCmdResponse+0x7e>
		{
			int len = atoi((char *)&header[2]);
 8003a10:	f107 0314 	add.w	r3, r7, #20
 8003a14:	3302      	adds	r3, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fa05 	bl	8003e26 <atoi>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24
			// every response always ends in /r/n (i.e., always > 2 bytes)
			if(len > 2)
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	dd16      	ble.n	8003a52 <getCmdResponse+0x7a>
			{
				unsigned char temp[2];

				// read the data (without the trailing /r/n)
				HAL_UART_Receive(wifi_uart, uart_reponse, len - 2, 0xFFFF);
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <getCmdResponse+0xc0>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	f7fe f961 	bl	8001cfc <HAL_UART_Receive>
				// cleanup the trailing /r/n
				HAL_UART_Receive(wifi_uart, temp, 2, 0xFFFF);
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <getCmdResponse+0xc0>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f107 010c 	add.w	r1, r7, #12
 8003a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a46:	2202      	movs	r2, #2
 8003a48:	f7fe f958 	bl	8001cfc <HAL_UART_Receive>
				// return actual data length
				return len - 2;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	3b02      	subs	r3, #2
 8003a50:	e01e      	b.n	8003a90 <getCmdResponse+0xb8>
			}
			else
			{
				return 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e01c      	b.n	8003a90 <getCmdResponse+0xb8>
			}

		}else{
			int len = atoi((char *)&header[2]);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f9e2 	bl	8003e26 <atoi>
 8003a62:	62b8      	str	r0, [r7, #40]	; 0x28
			HAL_UART_Receive(wifi_uart, uart_reponse, len, 0xFFFF);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <getCmdResponse+0xc0>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	f7fe f943 	bl	8001cfc <HAL_UART_Receive>
			printf("awm failed %s\r\n", uart_reponse);
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4808      	ldr	r0, [pc, #32]	; (8003a9c <getCmdResponse+0xc4>)
 8003a7a:	f000 fa0b 	bl	8003e94 <iprintf>
 8003a7e:	e005      	b.n	8003a8c <getCmdResponse+0xb4>
		}

    }else {
    	printf("garbage amw %s\r\n", header);
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4619      	mov	r1, r3
 8003a86:	4806      	ldr	r0, [pc, #24]	; (8003aa0 <getCmdResponse+0xc8>)
 8003a88:	f000 fa04 	bl	8003e94 <iprintf>
    }
    return -1;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000018 	.word	0x20000018
 8003a9c:	080051ac 	.word	0x080051ac
 8003aa0:	080051bc 	.word	0x080051bc

08003aa4 <setupNetwork>:

int setupNetwork(char *ssid, char *password){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0a4      	sub	sp, #144	; 0x90
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

	    uint8_t resp_buff[128] = { 0 };
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f9e4 	bl	8003e84 <memset>
	    size_t command_len;
	    sprintf((unsigned char*)wifi_command, "set wl s \"%s\"\r\n", ssid);
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	4921      	ldr	r1, [pc, #132]	; (8003b44 <setupNetwork+0xa0>)
 8003ac0:	4821      	ldr	r0, [pc, #132]	; (8003b48 <setupNetwork+0xa4>)
 8003ac2:	f000 f9ff 	bl	8003ec4 <siprintf>
	    command_len = strlen((char*)wifi_command);
 8003ac6:	4820      	ldr	r0, [pc, #128]	; (8003b48 <setupNetwork+0xa4>)
 8003ac8:	f7fc fb8a 	bl	80001e0 <strlen>
 8003acc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <setupNetwork+0xa8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ade:	491a      	ldr	r1, [pc, #104]	; (8003b48 <setupNetwork+0xa4>)
 8003ae0:	f7fe f873 	bl	8001bca <HAL_UART_Transmit>

	    if(getCmdResponse(resp_buff)<0)
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff75 	bl	80039d8 <getCmdResponse>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	da02      	bge.n	8003afa <setupNetwork+0x56>
	    	return -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	e01f      	b.n	8003b3a <setupNetwork+0x96>

	    sprintf((unsigned char*)wifi_command, "set wl p %s\r\n", password);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	4914      	ldr	r1, [pc, #80]	; (8003b50 <setupNetwork+0xac>)
 8003afe:	4812      	ldr	r0, [pc, #72]	; (8003b48 <setupNetwork+0xa4>)
 8003b00:	f000 f9e0 	bl	8003ec4 <siprintf>
	    command_len = strlen((char*)wifi_command);
 8003b04:	4810      	ldr	r0, [pc, #64]	; (8003b48 <setupNetwork+0xa4>)
 8003b06:	f7fc fb6b 	bl	80001e0 <strlen>
 8003b0a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <setupNetwork+0xa8>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1c:	490a      	ldr	r1, [pc, #40]	; (8003b48 <setupNetwork+0xa4>)
 8003b1e:	f7fe f854 	bl	8001bca <HAL_UART_Transmit>
	    if(getCmdResponse(resp_buff)<0)
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ff56 	bl	80039d8 <getCmdResponse>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da02      	bge.n	8003b38 <setupNetwork+0x94>
	        return -1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e000      	b.n	8003b3a <setupNetwork+0x96>
	    else
	    	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3790      	adds	r7, #144	; 0x90
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	080051d0 	.word	0x080051d0
 8003b48:	20000210 	.word	0x20000210
 8003b4c:	20000018 	.word	0x20000018
 8003b50:	080051e0 	.word	0x080051e0

08003b54 <setAutoJoinWifi>:
int setAutoJoinWifi(int state){
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b0a4      	sub	sp, #144	; 0x90
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
		uint8_t resp_buff[128] = { 0 };
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f98d 	bl	8003e84 <memset>
		size_t command_len;
		sprintf((unsigned char*)wifi_command, "set wl o e %d\r\n", state);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4911      	ldr	r1, [pc, #68]	; (8003bb4 <setAutoJoinWifi+0x60>)
 8003b6e:	4812      	ldr	r0, [pc, #72]	; (8003bb8 <setAutoJoinWifi+0x64>)
 8003b70:	f000 f9a8 	bl	8003ec4 <siprintf>
		command_len = strlen((char*)wifi_command);
 8003b74:	4810      	ldr	r0, [pc, #64]	; (8003bb8 <setAutoJoinWifi+0x64>)
 8003b76:	f7fc fb33 	bl	80001e0 <strlen>
 8003b7a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <setAutoJoinWifi+0x68>)
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b8c:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <setAutoJoinWifi+0x64>)
 8003b8e:	f7fe f81c 	bl	8001bca <HAL_UART_Transmit>
		if(getCmdResponse(resp_buff)<0)
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff1e 	bl	80039d8 <getCmdResponse>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da02      	bge.n	8003ba8 <setAutoJoinWifi+0x54>
			return -1;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba6:	e000      	b.n	8003baa <setAutoJoinWifi+0x56>
		else
			return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3790      	adds	r7, #144	; 0x90
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	080051f0 	.word	0x080051f0
 8003bb8:	20000210 	.word	0x20000210
 8003bbc:	20000018 	.word	0x20000018

08003bc0 <setTCPServer>:
int setTCPServer(int port, int timeout){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0a4      	sub	sp, #144	; 0x90
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]

	uint8_t resp_buff[128] = { 0 };
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f956 	bl	8003e84 <memset>
	size_t command_len;
	sprintf((unsigned char*)wifi_command, "set tc s p %d\r\n", port);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4921      	ldr	r1, [pc, #132]	; (8003c60 <setTCPServer+0xa0>)
 8003bdc:	4821      	ldr	r0, [pc, #132]	; (8003c64 <setTCPServer+0xa4>)
 8003bde:	f000 f971 	bl	8003ec4 <siprintf>
	command_len = strlen((char*)wifi_command);
 8003be2:	4820      	ldr	r0, [pc, #128]	; (8003c64 <setTCPServer+0xa4>)
 8003be4:	f7fc fafc 	bl	80001e0 <strlen>
 8003be8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <setTCPServer+0xa8>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfa:	491a      	ldr	r1, [pc, #104]	; (8003c64 <setTCPServer+0xa4>)
 8003bfc:	f7fd ffe5 	bl	8001bca <HAL_UART_Transmit>

	if(getCmdResponse(resp_buff)<0)
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fee7 	bl	80039d8 <getCmdResponse>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	da02      	bge.n	8003c16 <setTCPServer+0x56>
		return -1;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e01f      	b.n	8003c56 <setTCPServer+0x96>

	sprintf((unsigned char*)wifi_command, "set tc s t %d\r\n", timeout);
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4914      	ldr	r1, [pc, #80]	; (8003c6c <setTCPServer+0xac>)
 8003c1a:	4812      	ldr	r0, [pc, #72]	; (8003c64 <setTCPServer+0xa4>)
 8003c1c:	f000 f952 	bl	8003ec4 <siprintf>
	command_len = strlen((char*)wifi_command);
 8003c20:	4810      	ldr	r0, [pc, #64]	; (8003c64 <setTCPServer+0xa4>)
 8003c22:	f7fc fadd 	bl	80001e0 <strlen>
 8003c26:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <setTCPServer+0xa8>)
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c38:	490a      	ldr	r1, [pc, #40]	; (8003c64 <setTCPServer+0xa4>)
 8003c3a:	f7fd ffc6 	bl	8001bca <HAL_UART_Transmit>
	if(getCmdResponse(resp_buff)<0)
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fec8 	bl	80039d8 <getCmdResponse>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da02      	bge.n	8003c54 <setTCPServer+0x94>
		return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e000      	b.n	8003c56 <setTCPServer+0x96>
	else
		return 0;
 8003c54:	2300      	movs	r3, #0

}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3790      	adds	r7, #144	; 0x90
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	08005200 	.word	0x08005200
 8003c64:	20000210 	.word	0x20000210
 8003c68:	20000018 	.word	0x20000018
 8003c6c:	08005210 	.word	0x08005210

08003c70 <setAutostartTCP>:
int setAutostartTCP(int state){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b0a4      	sub	sp, #144	; 0x90
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]

	uint8_t resp_buff[128] = { 0 };
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f8ff 	bl	8003e84 <memset>
	size_t command_len;
	sprintf((unsigned char*)wifi_command, "set tc s a %d\r\n", state);
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <setAutostartTCP+0x60>)
 8003c8a:	4812      	ldr	r0, [pc, #72]	; (8003cd4 <setAutostartTCP+0x64>)
 8003c8c:	f000 f91a 	bl	8003ec4 <siprintf>
	command_len = strlen((char*)wifi_command);
 8003c90:	4810      	ldr	r0, [pc, #64]	; (8003cd4 <setAutostartTCP+0x64>)
 8003c92:	f7fc faa5 	bl	80001e0 <strlen>
 8003c96:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <setAutostartTCP+0x68>)
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca8:	490a      	ldr	r1, [pc, #40]	; (8003cd4 <setAutostartTCP+0x64>)
 8003caa:	f7fd ff8e 	bl	8001bca <HAL_UART_Transmit>
	if(getCmdResponse(resp_buff)<0)
 8003cae:	f107 030c 	add.w	r3, r7, #12
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fe90 	bl	80039d8 <getCmdResponse>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da02      	bge.n	8003cc4 <setAutostartTCP+0x54>
		return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e000      	b.n	8003cc6 <setAutostartTCP+0x56>
	else
		return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3790      	adds	r7, #144	; 0x90
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08005220 	.word	0x08005220
 8003cd4:	20000210 	.word	0x20000210
 8003cd8:	20000018 	.word	0x20000018

08003cdc <setBUSmode>:
int setBUSmode(const char *mode){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b0a4      	sub	sp, #144	; 0x90
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

	uint8_t resp_buff[128] = { 0 };
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f8c9 	bl	8003e84 <memset>
	size_t command_len;
	sprintf((unsigned char*)wifi_command, "set bus.mode %s\r\n", mode);
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4932      	ldr	r1, [pc, #200]	; (8003dc0 <setBUSmode+0xe4>)
 8003cf6:	4833      	ldr	r0, [pc, #204]	; (8003dc4 <setBUSmode+0xe8>)
 8003cf8:	f000 f8e4 	bl	8003ec4 <siprintf>
	command_len = strlen((char*)wifi_command);
 8003cfc:	4831      	ldr	r0, [pc, #196]	; (8003dc4 <setBUSmode+0xe8>)
 8003cfe:	f7fc fa6f 	bl	80001e0 <strlen>
 8003d02:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <setBUSmode+0xec>)
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d14:	492b      	ldr	r1, [pc, #172]	; (8003dc4 <setBUSmode+0xe8>)
 8003d16:	f7fd ff58 	bl	8001bca <HAL_UART_Transmit>

	if(getCmdResponse(resp_buff)<0)
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fe5a 	bl	80039d8 <getCmdResponse>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da02      	bge.n	8003d30 <setBUSmode+0x54>
		return -1;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e043      	b.n	8003db8 <setBUSmode+0xdc>
	sprintf((unsigned char*)wifi_command, "save\r\n");
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <setBUSmode+0xe8>)
 8003d32:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <setBUSmode+0xf0>)
 8003d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d38:	6018      	str	r0, [r3, #0]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	8019      	strh	r1, [r3, #0]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	0c0a      	lsrs	r2, r1, #16
 8003d42:	701a      	strb	r2, [r3, #0]
	command_len = strlen((char*)wifi_command);
 8003d44:	481f      	ldr	r0, [pc, #124]	; (8003dc4 <setBUSmode+0xe8>)
 8003d46:	f7fc fa4b 	bl	80001e0 <strlen>
 8003d4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <setBUSmode+0xec>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5c:	4919      	ldr	r1, [pc, #100]	; (8003dc4 <setBUSmode+0xe8>)
 8003d5e:	f7fd ff34 	bl	8001bca <HAL_UART_Transmit>

	if(getCmdResponse(resp_buff)<0)
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fe36 	bl	80039d8 <getCmdResponse>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da02      	bge.n	8003d78 <setBUSmode+0x9c>
	return -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	e01f      	b.n	8003db8 <setBUSmode+0xdc>
	sprintf((unsigned char*)wifi_command, "reboot\r\n");
 8003d78:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <setBUSmode+0xe8>)
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <setBUSmode+0xf4>)
 8003d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d7e:	c303      	stmia	r3!, {r0, r1}
 8003d80:	701a      	strb	r2, [r3, #0]
	command_len = strlen((char*)wifi_command);
 8003d82:	4810      	ldr	r0, [pc, #64]	; (8003dc4 <setBUSmode+0xe8>)
 8003d84:	f7fc fa2c 	bl	80001e0 <strlen>
 8003d88:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(wifi_uart, wifi_command, command_len, 0xFFFF);
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <setBUSmode+0xec>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d9a:	490a      	ldr	r1, [pc, #40]	; (8003dc4 <setBUSmode+0xe8>)
 8003d9c:	f7fd ff15 	bl	8001bca <HAL_UART_Transmit>

	if(getCmdResponse(resp_buff)<0)
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fe17 	bl	80039d8 <getCmdResponse>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da02      	bge.n	8003db6 <setBUSmode+0xda>
		return -1;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	e000      	b.n	8003db8 <setBUSmode+0xdc>
	else
		return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3790      	adds	r7, #144	; 0x90
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	08005230 	.word	0x08005230
 8003dc4:	20000210 	.word	0x20000210
 8003dc8:	20000018 	.word	0x20000018
 8003dcc:	08005244 	.word	0x08005244
 8003dd0:	0800524c 	.word	0x0800524c

08003dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dda:	e003      	b.n	8003de4 <LoopCopyDataInit>

08003ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003de2:	3104      	adds	r1, #4

08003de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003de4:	480b      	ldr	r0, [pc, #44]	; (8003e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dec:	d3f6      	bcc.n	8003ddc <CopyDataInit>
  ldr  r2, =_sbss
 8003dee:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003df0:	e002      	b.n	8003df8 <LoopFillZerobss>

08003df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003df4:	f842 3b04 	str.w	r3, [r2], #4

08003df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dfc:	d3f9      	bcc.n	8003df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dfe:	f7ff fd9f 	bl	8003940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e02:	f000 f81b 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e06:	f7ff fa15 	bl	8003234 <main>
  bx  lr    
 8003e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e10:	08005444 	.word	0x08005444
  ldr  r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e18:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8003e1c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8003e20:	20000350 	.word	0x20000350

08003e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e24:	e7fe      	b.n	8003e24 <ADC_IRQHandler>

08003e26 <atoi>:
 8003e26:	220a      	movs	r2, #10
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f000 b8e7 	b.w	8003ffc <strtol>
	...

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000001c 	.word	0x2000001c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4e0d      	ldr	r6, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1ba4      	subs	r4, r4, r6
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2500      	movs	r5, #0
 8003e48:	42a5      	cmp	r5, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4e0b      	ldr	r6, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f001 f97e 	bl	8005150 <_init>
 8003e54:	1ba4      	subs	r4, r4, r6
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2500      	movs	r5, #0
 8003e5a:	42a5      	cmp	r5, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e64:	4798      	blx	r3
 8003e66:	3501      	adds	r5, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e6e:	4798      	blx	r3
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	0800543c 	.word	0x0800543c
 8003e78:	0800543c 	.word	0x0800543c
 8003e7c:	0800543c 	.word	0x0800543c
 8003e80:	08005440 	.word	0x08005440

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <iprintf>:
 8003e94:	b40f      	push	{r0, r1, r2, r3}
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <iprintf+0x2c>)
 8003e98:	b513      	push	{r0, r1, r4, lr}
 8003e9a:	681c      	ldr	r4, [r3, #0]
 8003e9c:	b124      	cbz	r4, 8003ea8 <iprintf+0x14>
 8003e9e:	69a3      	ldr	r3, [r4, #24]
 8003ea0:	b913      	cbnz	r3, 8003ea8 <iprintf+0x14>
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 f900 	bl	80040a8 <__sinit>
 8003ea8:	ab05      	add	r3, sp, #20
 8003eaa:	9a04      	ldr	r2, [sp, #16]
 8003eac:	68a1      	ldr	r1, [r4, #8]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 fb6f 	bl	8004594 <_vfiprintf_r>
 8003eb6:	b002      	add	sp, #8
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ebc:	b004      	add	sp, #16
 8003ebe:	4770      	bx	lr
 8003ec0:	2000001c 	.word	0x2000001c

08003ec4 <siprintf>:
 8003ec4:	b40e      	push	{r1, r2, r3}
 8003ec6:	b500      	push	{lr}
 8003ec8:	b09c      	sub	sp, #112	; 0x70
 8003eca:	ab1d      	add	r3, sp, #116	; 0x74
 8003ecc:	9002      	str	r0, [sp, #8]
 8003ece:	9006      	str	r0, [sp, #24]
 8003ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed4:	4809      	ldr	r0, [pc, #36]	; (8003efc <siprintf+0x38>)
 8003ed6:	9107      	str	r1, [sp, #28]
 8003ed8:	9104      	str	r1, [sp, #16]
 8003eda:	4909      	ldr	r1, [pc, #36]	; (8003f00 <siprintf+0x3c>)
 8003edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee0:	9105      	str	r1, [sp, #20]
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	a902      	add	r1, sp, #8
 8003ee8:	f000 fa32 	bl	8004350 <_svfiprintf_r>
 8003eec:	9b02      	ldr	r3, [sp, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	b01c      	add	sp, #112	; 0x70
 8003ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef8:	b003      	add	sp, #12
 8003efa:	4770      	bx	lr
 8003efc:	2000001c 	.word	0x2000001c
 8003f00:	ffff0208 	.word	0xffff0208

08003f04 <_strtol_l.isra.0>:
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	4680      	mov	r8, r0
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	4692      	mov	sl, r2
 8003f0e:	461e      	mov	r6, r3
 8003f10:	460f      	mov	r7, r1
 8003f12:	463d      	mov	r5, r7
 8003f14:	9808      	ldr	r0, [sp, #32]
 8003f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f1a:	f000 f94f 	bl	80041bc <__locale_ctype_ptr_l>
 8003f1e:	4420      	add	r0, r4
 8003f20:	7843      	ldrb	r3, [r0, #1]
 8003f22:	f013 0308 	ands.w	r3, r3, #8
 8003f26:	d132      	bne.n	8003f8e <_strtol_l.isra.0+0x8a>
 8003f28:	2c2d      	cmp	r4, #45	; 0x2d
 8003f2a:	d132      	bne.n	8003f92 <_strtol_l.isra.0+0x8e>
 8003f2c:	787c      	ldrb	r4, [r7, #1]
 8003f2e:	1cbd      	adds	r5, r7, #2
 8003f30:	2201      	movs	r2, #1
 8003f32:	2e00      	cmp	r6, #0
 8003f34:	d05d      	beq.n	8003ff2 <_strtol_l.isra.0+0xee>
 8003f36:	2e10      	cmp	r6, #16
 8003f38:	d109      	bne.n	8003f4e <_strtol_l.isra.0+0x4a>
 8003f3a:	2c30      	cmp	r4, #48	; 0x30
 8003f3c:	d107      	bne.n	8003f4e <_strtol_l.isra.0+0x4a>
 8003f3e:	782b      	ldrb	r3, [r5, #0]
 8003f40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f44:	2b58      	cmp	r3, #88	; 0x58
 8003f46:	d14f      	bne.n	8003fe8 <_strtol_l.isra.0+0xe4>
 8003f48:	786c      	ldrb	r4, [r5, #1]
 8003f4a:	2610      	movs	r6, #16
 8003f4c:	3502      	adds	r5, #2
 8003f4e:	2a00      	cmp	r2, #0
 8003f50:	bf14      	ite	ne
 8003f52:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f56:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f5a:	2700      	movs	r7, #0
 8003f5c:	fbb1 fcf6 	udiv	ip, r1, r6
 8003f60:	4638      	mov	r0, r7
 8003f62:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003f66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	d817      	bhi.n	8003f9e <_strtol_l.isra.0+0x9a>
 8003f6e:	461c      	mov	r4, r3
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	dd23      	ble.n	8003fbc <_strtol_l.isra.0+0xb8>
 8003f74:	1c7b      	adds	r3, r7, #1
 8003f76:	d007      	beq.n	8003f88 <_strtol_l.isra.0+0x84>
 8003f78:	4584      	cmp	ip, r0
 8003f7a:	d31c      	bcc.n	8003fb6 <_strtol_l.isra.0+0xb2>
 8003f7c:	d101      	bne.n	8003f82 <_strtol_l.isra.0+0x7e>
 8003f7e:	45a6      	cmp	lr, r4
 8003f80:	db19      	blt.n	8003fb6 <_strtol_l.isra.0+0xb2>
 8003f82:	fb00 4006 	mla	r0, r0, r6, r4
 8003f86:	2701      	movs	r7, #1
 8003f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f8c:	e7eb      	b.n	8003f66 <_strtol_l.isra.0+0x62>
 8003f8e:	462f      	mov	r7, r5
 8003f90:	e7bf      	b.n	8003f12 <_strtol_l.isra.0+0xe>
 8003f92:	2c2b      	cmp	r4, #43	; 0x2b
 8003f94:	bf04      	itt	eq
 8003f96:	1cbd      	addeq	r5, r7, #2
 8003f98:	787c      	ldrbeq	r4, [r7, #1]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	e7c9      	b.n	8003f32 <_strtol_l.isra.0+0x2e>
 8003f9e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003fa2:	2b19      	cmp	r3, #25
 8003fa4:	d801      	bhi.n	8003faa <_strtol_l.isra.0+0xa6>
 8003fa6:	3c37      	subs	r4, #55	; 0x37
 8003fa8:	e7e2      	b.n	8003f70 <_strtol_l.isra.0+0x6c>
 8003faa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003fae:	2b19      	cmp	r3, #25
 8003fb0:	d804      	bhi.n	8003fbc <_strtol_l.isra.0+0xb8>
 8003fb2:	3c57      	subs	r4, #87	; 0x57
 8003fb4:	e7dc      	b.n	8003f70 <_strtol_l.isra.0+0x6c>
 8003fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8003fba:	e7e5      	b.n	8003f88 <_strtol_l.isra.0+0x84>
 8003fbc:	1c7b      	adds	r3, r7, #1
 8003fbe:	d108      	bne.n	8003fd2 <_strtol_l.isra.0+0xce>
 8003fc0:	2322      	movs	r3, #34	; 0x22
 8003fc2:	f8c8 3000 	str.w	r3, [r8]
 8003fc6:	4608      	mov	r0, r1
 8003fc8:	f1ba 0f00 	cmp.w	sl, #0
 8003fcc:	d107      	bne.n	8003fde <_strtol_l.isra.0+0xda>
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	b102      	cbz	r2, 8003fd6 <_strtol_l.isra.0+0xd2>
 8003fd4:	4240      	negs	r0, r0
 8003fd6:	f1ba 0f00 	cmp.w	sl, #0
 8003fda:	d0f8      	beq.n	8003fce <_strtol_l.isra.0+0xca>
 8003fdc:	b10f      	cbz	r7, 8003fe2 <_strtol_l.isra.0+0xde>
 8003fde:	f105 39ff 	add.w	r9, r5, #4294967295
 8003fe2:	f8ca 9000 	str.w	r9, [sl]
 8003fe6:	e7f2      	b.n	8003fce <_strtol_l.isra.0+0xca>
 8003fe8:	2430      	movs	r4, #48	; 0x30
 8003fea:	2e00      	cmp	r6, #0
 8003fec:	d1af      	bne.n	8003f4e <_strtol_l.isra.0+0x4a>
 8003fee:	2608      	movs	r6, #8
 8003ff0:	e7ad      	b.n	8003f4e <_strtol_l.isra.0+0x4a>
 8003ff2:	2c30      	cmp	r4, #48	; 0x30
 8003ff4:	d0a3      	beq.n	8003f3e <_strtol_l.isra.0+0x3a>
 8003ff6:	260a      	movs	r6, #10
 8003ff8:	e7a9      	b.n	8003f4e <_strtol_l.isra.0+0x4a>
	...

08003ffc <strtol>:
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <strtol+0x24>)
 8003ffe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004000:	681c      	ldr	r4, [r3, #0]
 8004002:	4d08      	ldr	r5, [pc, #32]	; (8004024 <strtol+0x28>)
 8004004:	6a23      	ldr	r3, [r4, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf08      	it	eq
 800400a:	462b      	moveq	r3, r5
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	460a      	mov	r2, r1
 8004012:	4601      	mov	r1, r0
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ff75 	bl	8003f04 <_strtol_l.isra.0>
 800401a:	b003      	add	sp, #12
 800401c:	bd30      	pop	{r4, r5, pc}
 800401e:	bf00      	nop
 8004020:	2000001c 	.word	0x2000001c
 8004024:	20000080 	.word	0x20000080

08004028 <std>:
 8004028:	2300      	movs	r3, #0
 800402a:	b510      	push	{r4, lr}
 800402c:	4604      	mov	r4, r0
 800402e:	e9c0 3300 	strd	r3, r3, [r0]
 8004032:	6083      	str	r3, [r0, #8]
 8004034:	8181      	strh	r1, [r0, #12]
 8004036:	6643      	str	r3, [r0, #100]	; 0x64
 8004038:	81c2      	strh	r2, [r0, #14]
 800403a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800403e:	6183      	str	r3, [r0, #24]
 8004040:	4619      	mov	r1, r3
 8004042:	2208      	movs	r2, #8
 8004044:	305c      	adds	r0, #92	; 0x5c
 8004046:	f7ff ff1d 	bl	8003e84 <memset>
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <std+0x38>)
 800404c:	6263      	str	r3, [r4, #36]	; 0x24
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <std+0x3c>)
 8004050:	62a3      	str	r3, [r4, #40]	; 0x28
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <std+0x40>)
 8004054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <std+0x44>)
 8004058:	6224      	str	r4, [r4, #32]
 800405a:	6323      	str	r3, [r4, #48]	; 0x30
 800405c:	bd10      	pop	{r4, pc}
 800405e:	bf00      	nop
 8004060:	08004af1 	.word	0x08004af1
 8004064:	08004b13 	.word	0x08004b13
 8004068:	08004b4b 	.word	0x08004b4b
 800406c:	08004b6f 	.word	0x08004b6f

08004070 <_cleanup_r>:
 8004070:	4901      	ldr	r1, [pc, #4]	; (8004078 <_cleanup_r+0x8>)
 8004072:	f000 b885 	b.w	8004180 <_fwalk_reent>
 8004076:	bf00      	nop
 8004078:	08004e65 	.word	0x08004e65

0800407c <__sfmoreglue>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	1e4a      	subs	r2, r1, #1
 8004080:	2568      	movs	r5, #104	; 0x68
 8004082:	4355      	muls	r5, r2
 8004084:	460e      	mov	r6, r1
 8004086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800408a:	f000 f8ad 	bl	80041e8 <_malloc_r>
 800408e:	4604      	mov	r4, r0
 8004090:	b140      	cbz	r0, 80040a4 <__sfmoreglue+0x28>
 8004092:	2100      	movs	r1, #0
 8004094:	e9c0 1600 	strd	r1, r6, [r0]
 8004098:	300c      	adds	r0, #12
 800409a:	60a0      	str	r0, [r4, #8]
 800409c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040a0:	f7ff fef0 	bl	8003e84 <memset>
 80040a4:	4620      	mov	r0, r4
 80040a6:	bd70      	pop	{r4, r5, r6, pc}

080040a8 <__sinit>:
 80040a8:	6983      	ldr	r3, [r0, #24]
 80040aa:	b510      	push	{r4, lr}
 80040ac:	4604      	mov	r4, r0
 80040ae:	bb33      	cbnz	r3, 80040fe <__sinit+0x56>
 80040b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80040b4:	6503      	str	r3, [r0, #80]	; 0x50
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <__sinit+0x58>)
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <__sinit+0x5c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6282      	str	r2, [r0, #40]	; 0x28
 80040be:	4298      	cmp	r0, r3
 80040c0:	bf04      	itt	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	6183      	streq	r3, [r0, #24]
 80040c6:	f000 f81f 	bl	8004108 <__sfp>
 80040ca:	6060      	str	r0, [r4, #4]
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 f81b 	bl	8004108 <__sfp>
 80040d2:	60a0      	str	r0, [r4, #8]
 80040d4:	4620      	mov	r0, r4
 80040d6:	f000 f817 	bl	8004108 <__sfp>
 80040da:	2200      	movs	r2, #0
 80040dc:	60e0      	str	r0, [r4, #12]
 80040de:	2104      	movs	r1, #4
 80040e0:	6860      	ldr	r0, [r4, #4]
 80040e2:	f7ff ffa1 	bl	8004028 <std>
 80040e6:	2201      	movs	r2, #1
 80040e8:	2109      	movs	r1, #9
 80040ea:	68a0      	ldr	r0, [r4, #8]
 80040ec:	f7ff ff9c 	bl	8004028 <std>
 80040f0:	2202      	movs	r2, #2
 80040f2:	2112      	movs	r1, #18
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	f7ff ff97 	bl	8004028 <std>
 80040fa:	2301      	movs	r3, #1
 80040fc:	61a3      	str	r3, [r4, #24]
 80040fe:	bd10      	pop	{r4, pc}
 8004100:	08005290 	.word	0x08005290
 8004104:	08004071 	.word	0x08004071

08004108 <__sfp>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <__sfp+0x70>)
 800410c:	681e      	ldr	r6, [r3, #0]
 800410e:	69b3      	ldr	r3, [r6, #24]
 8004110:	4607      	mov	r7, r0
 8004112:	b913      	cbnz	r3, 800411a <__sfp+0x12>
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff ffc7 	bl	80040a8 <__sinit>
 800411a:	3648      	adds	r6, #72	; 0x48
 800411c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004120:	3b01      	subs	r3, #1
 8004122:	d503      	bpl.n	800412c <__sfp+0x24>
 8004124:	6833      	ldr	r3, [r6, #0]
 8004126:	b133      	cbz	r3, 8004136 <__sfp+0x2e>
 8004128:	6836      	ldr	r6, [r6, #0]
 800412a:	e7f7      	b.n	800411c <__sfp+0x14>
 800412c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004130:	b16d      	cbz	r5, 800414e <__sfp+0x46>
 8004132:	3468      	adds	r4, #104	; 0x68
 8004134:	e7f4      	b.n	8004120 <__sfp+0x18>
 8004136:	2104      	movs	r1, #4
 8004138:	4638      	mov	r0, r7
 800413a:	f7ff ff9f 	bl	800407c <__sfmoreglue>
 800413e:	6030      	str	r0, [r6, #0]
 8004140:	2800      	cmp	r0, #0
 8004142:	d1f1      	bne.n	8004128 <__sfp+0x20>
 8004144:	230c      	movs	r3, #12
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4604      	mov	r4, r0
 800414a:	4620      	mov	r0, r4
 800414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <__sfp+0x74>)
 8004150:	6665      	str	r5, [r4, #100]	; 0x64
 8004152:	e9c4 5500 	strd	r5, r5, [r4]
 8004156:	60a5      	str	r5, [r4, #8]
 8004158:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800415c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004160:	2208      	movs	r2, #8
 8004162:	4629      	mov	r1, r5
 8004164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004168:	f7ff fe8c 	bl	8003e84 <memset>
 800416c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004174:	e7e9      	b.n	800414a <__sfp+0x42>
 8004176:	bf00      	nop
 8004178:	08005290 	.word	0x08005290
 800417c:	ffff0001 	.word	0xffff0001

08004180 <_fwalk_reent>:
 8004180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004184:	4680      	mov	r8, r0
 8004186:	4689      	mov	r9, r1
 8004188:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800418c:	2600      	movs	r6, #0
 800418e:	b914      	cbnz	r4, 8004196 <_fwalk_reent+0x16>
 8004190:	4630      	mov	r0, r6
 8004192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004196:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800419a:	3f01      	subs	r7, #1
 800419c:	d501      	bpl.n	80041a2 <_fwalk_reent+0x22>
 800419e:	6824      	ldr	r4, [r4, #0]
 80041a0:	e7f5      	b.n	800418e <_fwalk_reent+0xe>
 80041a2:	89ab      	ldrh	r3, [r5, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d907      	bls.n	80041b8 <_fwalk_reent+0x38>
 80041a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041ac:	3301      	adds	r3, #1
 80041ae:	d003      	beq.n	80041b8 <_fwalk_reent+0x38>
 80041b0:	4629      	mov	r1, r5
 80041b2:	4640      	mov	r0, r8
 80041b4:	47c8      	blx	r9
 80041b6:	4306      	orrs	r6, r0
 80041b8:	3568      	adds	r5, #104	; 0x68
 80041ba:	e7ee      	b.n	800419a <_fwalk_reent+0x1a>

080041bc <__locale_ctype_ptr_l>:
 80041bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80041c0:	4770      	bx	lr

080041c2 <__ascii_mbtowc>:
 80041c2:	b082      	sub	sp, #8
 80041c4:	b901      	cbnz	r1, 80041c8 <__ascii_mbtowc+0x6>
 80041c6:	a901      	add	r1, sp, #4
 80041c8:	b142      	cbz	r2, 80041dc <__ascii_mbtowc+0x1a>
 80041ca:	b14b      	cbz	r3, 80041e0 <__ascii_mbtowc+0x1e>
 80041cc:	7813      	ldrb	r3, [r2, #0]
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	1c10      	adds	r0, r2, #0
 80041d4:	bf18      	it	ne
 80041d6:	2001      	movne	r0, #1
 80041d8:	b002      	add	sp, #8
 80041da:	4770      	bx	lr
 80041dc:	4610      	mov	r0, r2
 80041de:	e7fb      	b.n	80041d8 <__ascii_mbtowc+0x16>
 80041e0:	f06f 0001 	mvn.w	r0, #1
 80041e4:	e7f8      	b.n	80041d8 <__ascii_mbtowc+0x16>
	...

080041e8 <_malloc_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	1ccd      	adds	r5, r1, #3
 80041ec:	f025 0503 	bic.w	r5, r5, #3
 80041f0:	3508      	adds	r5, #8
 80041f2:	2d0c      	cmp	r5, #12
 80041f4:	bf38      	it	cc
 80041f6:	250c      	movcc	r5, #12
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	4606      	mov	r6, r0
 80041fc:	db01      	blt.n	8004202 <_malloc_r+0x1a>
 80041fe:	42a9      	cmp	r1, r5
 8004200:	d903      	bls.n	800420a <_malloc_r+0x22>
 8004202:	230c      	movs	r3, #12
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	2000      	movs	r0, #0
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	f000 feef 	bl	8004fec <__malloc_lock>
 800420e:	4a21      	ldr	r2, [pc, #132]	; (8004294 <_malloc_r+0xac>)
 8004210:	6814      	ldr	r4, [r2, #0]
 8004212:	4621      	mov	r1, r4
 8004214:	b991      	cbnz	r1, 800423c <_malloc_r+0x54>
 8004216:	4c20      	ldr	r4, [pc, #128]	; (8004298 <_malloc_r+0xb0>)
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b91b      	cbnz	r3, 8004224 <_malloc_r+0x3c>
 800421c:	4630      	mov	r0, r6
 800421e:	f000 fc57 	bl	8004ad0 <_sbrk_r>
 8004222:	6020      	str	r0, [r4, #0]
 8004224:	4629      	mov	r1, r5
 8004226:	4630      	mov	r0, r6
 8004228:	f000 fc52 	bl	8004ad0 <_sbrk_r>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d124      	bne.n	800427a <_malloc_r+0x92>
 8004230:	230c      	movs	r3, #12
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	4630      	mov	r0, r6
 8004236:	f000 feda 	bl	8004fee <__malloc_unlock>
 800423a:	e7e4      	b.n	8004206 <_malloc_r+0x1e>
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	1b5b      	subs	r3, r3, r5
 8004240:	d418      	bmi.n	8004274 <_malloc_r+0x8c>
 8004242:	2b0b      	cmp	r3, #11
 8004244:	d90f      	bls.n	8004266 <_malloc_r+0x7e>
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	50cd      	str	r5, [r1, r3]
 800424a:	18cc      	adds	r4, r1, r3
 800424c:	4630      	mov	r0, r6
 800424e:	f000 fece 	bl	8004fee <__malloc_unlock>
 8004252:	f104 000b 	add.w	r0, r4, #11
 8004256:	1d23      	adds	r3, r4, #4
 8004258:	f020 0007 	bic.w	r0, r0, #7
 800425c:	1ac3      	subs	r3, r0, r3
 800425e:	d0d3      	beq.n	8004208 <_malloc_r+0x20>
 8004260:	425a      	negs	r2, r3
 8004262:	50e2      	str	r2, [r4, r3]
 8004264:	e7d0      	b.n	8004208 <_malloc_r+0x20>
 8004266:	428c      	cmp	r4, r1
 8004268:	684b      	ldr	r3, [r1, #4]
 800426a:	bf16      	itet	ne
 800426c:	6063      	strne	r3, [r4, #4]
 800426e:	6013      	streq	r3, [r2, #0]
 8004270:	460c      	movne	r4, r1
 8004272:	e7eb      	b.n	800424c <_malloc_r+0x64>
 8004274:	460c      	mov	r4, r1
 8004276:	6849      	ldr	r1, [r1, #4]
 8004278:	e7cc      	b.n	8004214 <_malloc_r+0x2c>
 800427a:	1cc4      	adds	r4, r0, #3
 800427c:	f024 0403 	bic.w	r4, r4, #3
 8004280:	42a0      	cmp	r0, r4
 8004282:	d005      	beq.n	8004290 <_malloc_r+0xa8>
 8004284:	1a21      	subs	r1, r4, r0
 8004286:	4630      	mov	r0, r6
 8004288:	f000 fc22 	bl	8004ad0 <_sbrk_r>
 800428c:	3001      	adds	r0, #1
 800428e:	d0cf      	beq.n	8004230 <_malloc_r+0x48>
 8004290:	6025      	str	r5, [r4, #0]
 8004292:	e7db      	b.n	800424c <_malloc_r+0x64>
 8004294:	20000290 	.word	0x20000290
 8004298:	20000294 	.word	0x20000294

0800429c <__ssputs_r>:
 800429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	688e      	ldr	r6, [r1, #8]
 80042a2:	429e      	cmp	r6, r3
 80042a4:	4682      	mov	sl, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	4690      	mov	r8, r2
 80042aa:	4699      	mov	r9, r3
 80042ac:	d837      	bhi.n	800431e <__ssputs_r+0x82>
 80042ae:	898a      	ldrh	r2, [r1, #12]
 80042b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042b4:	d031      	beq.n	800431a <__ssputs_r+0x7e>
 80042b6:	6825      	ldr	r5, [r4, #0]
 80042b8:	6909      	ldr	r1, [r1, #16]
 80042ba:	1a6f      	subs	r7, r5, r1
 80042bc:	6965      	ldr	r5, [r4, #20]
 80042be:	2302      	movs	r3, #2
 80042c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80042c8:	f109 0301 	add.w	r3, r9, #1
 80042cc:	443b      	add	r3, r7
 80042ce:	429d      	cmp	r5, r3
 80042d0:	bf38      	it	cc
 80042d2:	461d      	movcc	r5, r3
 80042d4:	0553      	lsls	r3, r2, #21
 80042d6:	d530      	bpl.n	800433a <__ssputs_r+0x9e>
 80042d8:	4629      	mov	r1, r5
 80042da:	f7ff ff85 	bl	80041e8 <_malloc_r>
 80042de:	4606      	mov	r6, r0
 80042e0:	b950      	cbnz	r0, 80042f8 <__ssputs_r+0x5c>
 80042e2:	230c      	movs	r3, #12
 80042e4:	f8ca 3000 	str.w	r3, [sl]
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	463a      	mov	r2, r7
 80042fa:	6921      	ldr	r1, [r4, #16]
 80042fc:	f000 fe52 	bl	8004fa4 <memcpy>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	6126      	str	r6, [r4, #16]
 800430e:	6165      	str	r5, [r4, #20]
 8004310:	443e      	add	r6, r7
 8004312:	1bed      	subs	r5, r5, r7
 8004314:	6026      	str	r6, [r4, #0]
 8004316:	60a5      	str	r5, [r4, #8]
 8004318:	464e      	mov	r6, r9
 800431a:	454e      	cmp	r6, r9
 800431c:	d900      	bls.n	8004320 <__ssputs_r+0x84>
 800431e:	464e      	mov	r6, r9
 8004320:	4632      	mov	r2, r6
 8004322:	4641      	mov	r1, r8
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	f000 fe48 	bl	8004fba <memmove>
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	60a3      	str	r3, [r4, #8]
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	441e      	add	r6, r3
 8004334:	6026      	str	r6, [r4, #0]
 8004336:	2000      	movs	r0, #0
 8004338:	e7dc      	b.n	80042f4 <__ssputs_r+0x58>
 800433a:	462a      	mov	r2, r5
 800433c:	f000 fea6 	bl	800508c <_realloc_r>
 8004340:	4606      	mov	r6, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d1e2      	bne.n	800430c <__ssputs_r+0x70>
 8004346:	6921      	ldr	r1, [r4, #16]
 8004348:	4650      	mov	r0, sl
 800434a:	f000 fe51 	bl	8004ff0 <_free_r>
 800434e:	e7c8      	b.n	80042e2 <__ssputs_r+0x46>

08004350 <_svfiprintf_r>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	461d      	mov	r5, r3
 8004356:	898b      	ldrh	r3, [r1, #12]
 8004358:	061f      	lsls	r7, r3, #24
 800435a:	b09d      	sub	sp, #116	; 0x74
 800435c:	4680      	mov	r8, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4616      	mov	r6, r2
 8004362:	d50f      	bpl.n	8004384 <_svfiprintf_r+0x34>
 8004364:	690b      	ldr	r3, [r1, #16]
 8004366:	b96b      	cbnz	r3, 8004384 <_svfiprintf_r+0x34>
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	f7ff ff3d 	bl	80041e8 <_malloc_r>
 800436e:	6020      	str	r0, [r4, #0]
 8004370:	6120      	str	r0, [r4, #16]
 8004372:	b928      	cbnz	r0, 8004380 <_svfiprintf_r+0x30>
 8004374:	230c      	movs	r3, #12
 8004376:	f8c8 3000 	str.w	r3, [r8]
 800437a:	f04f 30ff 	mov.w	r0, #4294967295
 800437e:	e0c8      	b.n	8004512 <_svfiprintf_r+0x1c2>
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	6163      	str	r3, [r4, #20]
 8004384:	2300      	movs	r3, #0
 8004386:	9309      	str	r3, [sp, #36]	; 0x24
 8004388:	2320      	movs	r3, #32
 800438a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800438e:	2330      	movs	r3, #48	; 0x30
 8004390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004394:	9503      	str	r5, [sp, #12]
 8004396:	f04f 0b01 	mov.w	fp, #1
 800439a:	4637      	mov	r7, r6
 800439c:	463d      	mov	r5, r7
 800439e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043a2:	b10b      	cbz	r3, 80043a8 <_svfiprintf_r+0x58>
 80043a4:	2b25      	cmp	r3, #37	; 0x25
 80043a6:	d13e      	bne.n	8004426 <_svfiprintf_r+0xd6>
 80043a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80043ac:	d00b      	beq.n	80043c6 <_svfiprintf_r+0x76>
 80043ae:	4653      	mov	r3, sl
 80043b0:	4632      	mov	r2, r6
 80043b2:	4621      	mov	r1, r4
 80043b4:	4640      	mov	r0, r8
 80043b6:	f7ff ff71 	bl	800429c <__ssputs_r>
 80043ba:	3001      	adds	r0, #1
 80043bc:	f000 80a4 	beq.w	8004508 <_svfiprintf_r+0x1b8>
 80043c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c2:	4453      	add	r3, sl
 80043c4:	9309      	str	r3, [sp, #36]	; 0x24
 80043c6:	783b      	ldrb	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 809d 	beq.w	8004508 <_svfiprintf_r+0x1b8>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d8:	9304      	str	r3, [sp, #16]
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e0:	931a      	str	r3, [sp, #104]	; 0x68
 80043e2:	462f      	mov	r7, r5
 80043e4:	2205      	movs	r2, #5
 80043e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80043ea:	4850      	ldr	r0, [pc, #320]	; (800452c <_svfiprintf_r+0x1dc>)
 80043ec:	f7fb ff00 	bl	80001f0 <memchr>
 80043f0:	9b04      	ldr	r3, [sp, #16]
 80043f2:	b9d0      	cbnz	r0, 800442a <_svfiprintf_r+0xda>
 80043f4:	06d9      	lsls	r1, r3, #27
 80043f6:	bf44      	itt	mi
 80043f8:	2220      	movmi	r2, #32
 80043fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043fe:	071a      	lsls	r2, r3, #28
 8004400:	bf44      	itt	mi
 8004402:	222b      	movmi	r2, #43	; 0x2b
 8004404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004408:	782a      	ldrb	r2, [r5, #0]
 800440a:	2a2a      	cmp	r2, #42	; 0x2a
 800440c:	d015      	beq.n	800443a <_svfiprintf_r+0xea>
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	462f      	mov	r7, r5
 8004412:	2000      	movs	r0, #0
 8004414:	250a      	movs	r5, #10
 8004416:	4639      	mov	r1, r7
 8004418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800441c:	3b30      	subs	r3, #48	; 0x30
 800441e:	2b09      	cmp	r3, #9
 8004420:	d94d      	bls.n	80044be <_svfiprintf_r+0x16e>
 8004422:	b1b8      	cbz	r0, 8004454 <_svfiprintf_r+0x104>
 8004424:	e00f      	b.n	8004446 <_svfiprintf_r+0xf6>
 8004426:	462f      	mov	r7, r5
 8004428:	e7b8      	b.n	800439c <_svfiprintf_r+0x4c>
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <_svfiprintf_r+0x1dc>)
 800442c:	1a80      	subs	r0, r0, r2
 800442e:	fa0b f000 	lsl.w	r0, fp, r0
 8004432:	4318      	orrs	r0, r3
 8004434:	9004      	str	r0, [sp, #16]
 8004436:	463d      	mov	r5, r7
 8004438:	e7d3      	b.n	80043e2 <_svfiprintf_r+0x92>
 800443a:	9a03      	ldr	r2, [sp, #12]
 800443c:	1d11      	adds	r1, r2, #4
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	9103      	str	r1, [sp, #12]
 8004442:	2a00      	cmp	r2, #0
 8004444:	db01      	blt.n	800444a <_svfiprintf_r+0xfa>
 8004446:	9207      	str	r2, [sp, #28]
 8004448:	e004      	b.n	8004454 <_svfiprintf_r+0x104>
 800444a:	4252      	negs	r2, r2
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	9207      	str	r2, [sp, #28]
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	783b      	ldrb	r3, [r7, #0]
 8004456:	2b2e      	cmp	r3, #46	; 0x2e
 8004458:	d10c      	bne.n	8004474 <_svfiprintf_r+0x124>
 800445a:	787b      	ldrb	r3, [r7, #1]
 800445c:	2b2a      	cmp	r3, #42	; 0x2a
 800445e:	d133      	bne.n	80044c8 <_svfiprintf_r+0x178>
 8004460:	9b03      	ldr	r3, [sp, #12]
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9203      	str	r2, [sp, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	bfb8      	it	lt
 800446c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004470:	3702      	adds	r7, #2
 8004472:	9305      	str	r3, [sp, #20]
 8004474:	4d2e      	ldr	r5, [pc, #184]	; (8004530 <_svfiprintf_r+0x1e0>)
 8004476:	7839      	ldrb	r1, [r7, #0]
 8004478:	2203      	movs	r2, #3
 800447a:	4628      	mov	r0, r5
 800447c:	f7fb feb8 	bl	80001f0 <memchr>
 8004480:	b138      	cbz	r0, 8004492 <_svfiprintf_r+0x142>
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	1b40      	subs	r0, r0, r5
 8004486:	fa03 f000 	lsl.w	r0, r3, r0
 800448a:	9b04      	ldr	r3, [sp, #16]
 800448c:	4303      	orrs	r3, r0
 800448e:	3701      	adds	r7, #1
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	7839      	ldrb	r1, [r7, #0]
 8004494:	4827      	ldr	r0, [pc, #156]	; (8004534 <_svfiprintf_r+0x1e4>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800449a:	2206      	movs	r2, #6
 800449c:	1c7e      	adds	r6, r7, #1
 800449e:	f7fb fea7 	bl	80001f0 <memchr>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d038      	beq.n	8004518 <_svfiprintf_r+0x1c8>
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <_svfiprintf_r+0x1e8>)
 80044a8:	bb13      	cbnz	r3, 80044f0 <_svfiprintf_r+0x1a0>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	3307      	adds	r3, #7
 80044ae:	f023 0307 	bic.w	r3, r3, #7
 80044b2:	3308      	adds	r3, #8
 80044b4:	9303      	str	r3, [sp, #12]
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	444b      	add	r3, r9
 80044ba:	9309      	str	r3, [sp, #36]	; 0x24
 80044bc:	e76d      	b.n	800439a <_svfiprintf_r+0x4a>
 80044be:	fb05 3202 	mla	r2, r5, r2, r3
 80044c2:	2001      	movs	r0, #1
 80044c4:	460f      	mov	r7, r1
 80044c6:	e7a6      	b.n	8004416 <_svfiprintf_r+0xc6>
 80044c8:	2300      	movs	r3, #0
 80044ca:	3701      	adds	r7, #1
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	4619      	mov	r1, r3
 80044d0:	250a      	movs	r5, #10
 80044d2:	4638      	mov	r0, r7
 80044d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d8:	3a30      	subs	r2, #48	; 0x30
 80044da:	2a09      	cmp	r2, #9
 80044dc:	d903      	bls.n	80044e6 <_svfiprintf_r+0x196>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0c8      	beq.n	8004474 <_svfiprintf_r+0x124>
 80044e2:	9105      	str	r1, [sp, #20]
 80044e4:	e7c6      	b.n	8004474 <_svfiprintf_r+0x124>
 80044e6:	fb05 2101 	mla	r1, r5, r1, r2
 80044ea:	2301      	movs	r3, #1
 80044ec:	4607      	mov	r7, r0
 80044ee:	e7f0      	b.n	80044d2 <_svfiprintf_r+0x182>
 80044f0:	ab03      	add	r3, sp, #12
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4622      	mov	r2, r4
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <_svfiprintf_r+0x1ec>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	4640      	mov	r0, r8
 80044fc:	f3af 8000 	nop.w
 8004500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004504:	4681      	mov	r9, r0
 8004506:	d1d6      	bne.n	80044b6 <_svfiprintf_r+0x166>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	065b      	lsls	r3, r3, #25
 800450c:	f53f af35 	bmi.w	800437a <_svfiprintf_r+0x2a>
 8004510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004512:	b01d      	add	sp, #116	; 0x74
 8004514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	4622      	mov	r2, r4
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <_svfiprintf_r+0x1ec>)
 8004520:	a904      	add	r1, sp, #16
 8004522:	4640      	mov	r0, r8
 8004524:	f000 f9c2 	bl	80048ac <_printf_i>
 8004528:	e7ea      	b.n	8004500 <_svfiprintf_r+0x1b0>
 800452a:	bf00      	nop
 800452c:	080052fe 	.word	0x080052fe
 8004530:	08005304 	.word	0x08005304
 8004534:	08005308 	.word	0x08005308
 8004538:	00000000 	.word	0x00000000
 800453c:	0800429d 	.word	0x0800429d

08004540 <__sfputc_r>:
 8004540:	6893      	ldr	r3, [r2, #8]
 8004542:	3b01      	subs	r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	b410      	push	{r4}
 8004548:	6093      	str	r3, [r2, #8]
 800454a:	da08      	bge.n	800455e <__sfputc_r+0x1e>
 800454c:	6994      	ldr	r4, [r2, #24]
 800454e:	42a3      	cmp	r3, r4
 8004550:	db01      	blt.n	8004556 <__sfputc_r+0x16>
 8004552:	290a      	cmp	r1, #10
 8004554:	d103      	bne.n	800455e <__sfputc_r+0x1e>
 8004556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455a:	f000 bb0d 	b.w	8004b78 <__swbuf_r>
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	1c58      	adds	r0, r3, #1
 8004562:	6010      	str	r0, [r2, #0]
 8004564:	7019      	strb	r1, [r3, #0]
 8004566:	4608      	mov	r0, r1
 8004568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800456c:	4770      	bx	lr

0800456e <__sfputs_r>:
 800456e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004570:	4606      	mov	r6, r0
 8004572:	460f      	mov	r7, r1
 8004574:	4614      	mov	r4, r2
 8004576:	18d5      	adds	r5, r2, r3
 8004578:	42ac      	cmp	r4, r5
 800457a:	d101      	bne.n	8004580 <__sfputs_r+0x12>
 800457c:	2000      	movs	r0, #0
 800457e:	e007      	b.n	8004590 <__sfputs_r+0x22>
 8004580:	463a      	mov	r2, r7
 8004582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff ffda 	bl	8004540 <__sfputc_r>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d1f3      	bne.n	8004578 <__sfputs_r+0xa>
 8004590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004594 <_vfiprintf_r>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	b09d      	sub	sp, #116	; 0x74
 800459c:	4617      	mov	r7, r2
 800459e:	461d      	mov	r5, r3
 80045a0:	4606      	mov	r6, r0
 80045a2:	b118      	cbz	r0, 80045ac <_vfiprintf_r+0x18>
 80045a4:	6983      	ldr	r3, [r0, #24]
 80045a6:	b90b      	cbnz	r3, 80045ac <_vfiprintf_r+0x18>
 80045a8:	f7ff fd7e 	bl	80040a8 <__sinit>
 80045ac:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <_vfiprintf_r+0x20c>)
 80045ae:	429c      	cmp	r4, r3
 80045b0:	d158      	bne.n	8004664 <_vfiprintf_r+0xd0>
 80045b2:	6874      	ldr	r4, [r6, #4]
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	0718      	lsls	r0, r3, #28
 80045b8:	d55e      	bpl.n	8004678 <_vfiprintf_r+0xe4>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <_vfiprintf_r+0xe4>
 80045c0:	2300      	movs	r3, #0
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	2320      	movs	r3, #32
 80045c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ca:	2330      	movs	r3, #48	; 0x30
 80045cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045d0:	9503      	str	r5, [sp, #12]
 80045d2:	f04f 0b01 	mov.w	fp, #1
 80045d6:	46b8      	mov	r8, r7
 80045d8:	4645      	mov	r5, r8
 80045da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045de:	b10b      	cbz	r3, 80045e4 <_vfiprintf_r+0x50>
 80045e0:	2b25      	cmp	r3, #37	; 0x25
 80045e2:	d154      	bne.n	800468e <_vfiprintf_r+0xfa>
 80045e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80045e8:	d00b      	beq.n	8004602 <_vfiprintf_r+0x6e>
 80045ea:	4653      	mov	r3, sl
 80045ec:	463a      	mov	r2, r7
 80045ee:	4621      	mov	r1, r4
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff ffbc 	bl	800456e <__sfputs_r>
 80045f6:	3001      	adds	r0, #1
 80045f8:	f000 80c2 	beq.w	8004780 <_vfiprintf_r+0x1ec>
 80045fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fe:	4453      	add	r3, sl
 8004600:	9309      	str	r3, [sp, #36]	; 0x24
 8004602:	f898 3000 	ldrb.w	r3, [r8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80ba 	beq.w	8004780 <_vfiprintf_r+0x1ec>
 800460c:	2300      	movs	r3, #0
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	9307      	str	r3, [sp, #28]
 800461a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800461e:	931a      	str	r3, [sp, #104]	; 0x68
 8004620:	46a8      	mov	r8, r5
 8004622:	2205      	movs	r2, #5
 8004624:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004628:	485e      	ldr	r0, [pc, #376]	; (80047a4 <_vfiprintf_r+0x210>)
 800462a:	f7fb fde1 	bl	80001f0 <memchr>
 800462e:	9b04      	ldr	r3, [sp, #16]
 8004630:	bb78      	cbnz	r0, 8004692 <_vfiprintf_r+0xfe>
 8004632:	06d9      	lsls	r1, r3, #27
 8004634:	bf44      	itt	mi
 8004636:	2220      	movmi	r2, #32
 8004638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800463c:	071a      	lsls	r2, r3, #28
 800463e:	bf44      	itt	mi
 8004640:	222b      	movmi	r2, #43	; 0x2b
 8004642:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004646:	782a      	ldrb	r2, [r5, #0]
 8004648:	2a2a      	cmp	r2, #42	; 0x2a
 800464a:	d02a      	beq.n	80046a2 <_vfiprintf_r+0x10e>
 800464c:	9a07      	ldr	r2, [sp, #28]
 800464e:	46a8      	mov	r8, r5
 8004650:	2000      	movs	r0, #0
 8004652:	250a      	movs	r5, #10
 8004654:	4641      	mov	r1, r8
 8004656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465a:	3b30      	subs	r3, #48	; 0x30
 800465c:	2b09      	cmp	r3, #9
 800465e:	d969      	bls.n	8004734 <_vfiprintf_r+0x1a0>
 8004660:	b360      	cbz	r0, 80046bc <_vfiprintf_r+0x128>
 8004662:	e024      	b.n	80046ae <_vfiprintf_r+0x11a>
 8004664:	4b50      	ldr	r3, [pc, #320]	; (80047a8 <_vfiprintf_r+0x214>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d101      	bne.n	800466e <_vfiprintf_r+0xda>
 800466a:	68b4      	ldr	r4, [r6, #8]
 800466c:	e7a2      	b.n	80045b4 <_vfiprintf_r+0x20>
 800466e:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <_vfiprintf_r+0x218>)
 8004670:	429c      	cmp	r4, r3
 8004672:	bf08      	it	eq
 8004674:	68f4      	ldreq	r4, [r6, #12]
 8004676:	e79d      	b.n	80045b4 <_vfiprintf_r+0x20>
 8004678:	4621      	mov	r1, r4
 800467a:	4630      	mov	r0, r6
 800467c:	f000 faee 	bl	8004c5c <__swsetup_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	d09d      	beq.n	80045c0 <_vfiprintf_r+0x2c>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	b01d      	add	sp, #116	; 0x74
 800468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468e:	46a8      	mov	r8, r5
 8004690:	e7a2      	b.n	80045d8 <_vfiprintf_r+0x44>
 8004692:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <_vfiprintf_r+0x210>)
 8004694:	1a80      	subs	r0, r0, r2
 8004696:	fa0b f000 	lsl.w	r0, fp, r0
 800469a:	4318      	orrs	r0, r3
 800469c:	9004      	str	r0, [sp, #16]
 800469e:	4645      	mov	r5, r8
 80046a0:	e7be      	b.n	8004620 <_vfiprintf_r+0x8c>
 80046a2:	9a03      	ldr	r2, [sp, #12]
 80046a4:	1d11      	adds	r1, r2, #4
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	9103      	str	r1, [sp, #12]
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	db01      	blt.n	80046b2 <_vfiprintf_r+0x11e>
 80046ae:	9207      	str	r2, [sp, #28]
 80046b0:	e004      	b.n	80046bc <_vfiprintf_r+0x128>
 80046b2:	4252      	negs	r2, r2
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	9207      	str	r2, [sp, #28]
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	f898 3000 	ldrb.w	r3, [r8]
 80046c0:	2b2e      	cmp	r3, #46	; 0x2e
 80046c2:	d10e      	bne.n	80046e2 <_vfiprintf_r+0x14e>
 80046c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80046c8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ca:	d138      	bne.n	800473e <_vfiprintf_r+0x1aa>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	9203      	str	r2, [sp, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bfb8      	it	lt
 80046d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046dc:	f108 0802 	add.w	r8, r8, #2
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	4d33      	ldr	r5, [pc, #204]	; (80047b0 <_vfiprintf_r+0x21c>)
 80046e4:	f898 1000 	ldrb.w	r1, [r8]
 80046e8:	2203      	movs	r2, #3
 80046ea:	4628      	mov	r0, r5
 80046ec:	f7fb fd80 	bl	80001f0 <memchr>
 80046f0:	b140      	cbz	r0, 8004704 <_vfiprintf_r+0x170>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	1b40      	subs	r0, r0, r5
 80046f6:	fa03 f000 	lsl.w	r0, r3, r0
 80046fa:	9b04      	ldr	r3, [sp, #16]
 80046fc:	4303      	orrs	r3, r0
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	9304      	str	r3, [sp, #16]
 8004704:	f898 1000 	ldrb.w	r1, [r8]
 8004708:	482a      	ldr	r0, [pc, #168]	; (80047b4 <_vfiprintf_r+0x220>)
 800470a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800470e:	2206      	movs	r2, #6
 8004710:	f108 0701 	add.w	r7, r8, #1
 8004714:	f7fb fd6c 	bl	80001f0 <memchr>
 8004718:	2800      	cmp	r0, #0
 800471a:	d037      	beq.n	800478c <_vfiprintf_r+0x1f8>
 800471c:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <_vfiprintf_r+0x224>)
 800471e:	bb1b      	cbnz	r3, 8004768 <_vfiprintf_r+0x1d4>
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	3307      	adds	r3, #7
 8004724:	f023 0307 	bic.w	r3, r3, #7
 8004728:	3308      	adds	r3, #8
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800472e:	444b      	add	r3, r9
 8004730:	9309      	str	r3, [sp, #36]	; 0x24
 8004732:	e750      	b.n	80045d6 <_vfiprintf_r+0x42>
 8004734:	fb05 3202 	mla	r2, r5, r2, r3
 8004738:	2001      	movs	r0, #1
 800473a:	4688      	mov	r8, r1
 800473c:	e78a      	b.n	8004654 <_vfiprintf_r+0xc0>
 800473e:	2300      	movs	r3, #0
 8004740:	f108 0801 	add.w	r8, r8, #1
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	4619      	mov	r1, r3
 8004748:	250a      	movs	r5, #10
 800474a:	4640      	mov	r0, r8
 800474c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004750:	3a30      	subs	r2, #48	; 0x30
 8004752:	2a09      	cmp	r2, #9
 8004754:	d903      	bls.n	800475e <_vfiprintf_r+0x1ca>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0c3      	beq.n	80046e2 <_vfiprintf_r+0x14e>
 800475a:	9105      	str	r1, [sp, #20]
 800475c:	e7c1      	b.n	80046e2 <_vfiprintf_r+0x14e>
 800475e:	fb05 2101 	mla	r1, r5, r1, r2
 8004762:	2301      	movs	r3, #1
 8004764:	4680      	mov	r8, r0
 8004766:	e7f0      	b.n	800474a <_vfiprintf_r+0x1b6>
 8004768:	ab03      	add	r3, sp, #12
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4622      	mov	r2, r4
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <_vfiprintf_r+0x228>)
 8004770:	a904      	add	r1, sp, #16
 8004772:	4630      	mov	r0, r6
 8004774:	f3af 8000 	nop.w
 8004778:	f1b0 3fff 	cmp.w	r0, #4294967295
 800477c:	4681      	mov	r9, r0
 800477e:	d1d5      	bne.n	800472c <_vfiprintf_r+0x198>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	065b      	lsls	r3, r3, #25
 8004784:	f53f af7e 	bmi.w	8004684 <_vfiprintf_r+0xf0>
 8004788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800478a:	e77d      	b.n	8004688 <_vfiprintf_r+0xf4>
 800478c:	ab03      	add	r3, sp, #12
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	4622      	mov	r2, r4
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <_vfiprintf_r+0x228>)
 8004794:	a904      	add	r1, sp, #16
 8004796:	4630      	mov	r0, r6
 8004798:	f000 f888 	bl	80048ac <_printf_i>
 800479c:	e7ec      	b.n	8004778 <_vfiprintf_r+0x1e4>
 800479e:	bf00      	nop
 80047a0:	080052b4 	.word	0x080052b4
 80047a4:	080052fe 	.word	0x080052fe
 80047a8:	080052d4 	.word	0x080052d4
 80047ac:	08005294 	.word	0x08005294
 80047b0:	08005304 	.word	0x08005304
 80047b4:	08005308 	.word	0x08005308
 80047b8:	00000000 	.word	0x00000000
 80047bc:	0800456f 	.word	0x0800456f

080047c0 <_printf_common>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	4691      	mov	r9, r2
 80047c6:	461f      	mov	r7, r3
 80047c8:	688a      	ldr	r2, [r1, #8]
 80047ca:	690b      	ldr	r3, [r1, #16]
 80047cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bfb8      	it	lt
 80047d4:	4613      	movlt	r3, r2
 80047d6:	f8c9 3000 	str.w	r3, [r9]
 80047da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047de:	4606      	mov	r6, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	b112      	cbz	r2, 80047ea <_printf_common+0x2a>
 80047e4:	3301      	adds	r3, #1
 80047e6:	f8c9 3000 	str.w	r3, [r9]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	0699      	lsls	r1, r3, #26
 80047ee:	bf42      	ittt	mi
 80047f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047f4:	3302      	addmi	r3, #2
 80047f6:	f8c9 3000 	strmi.w	r3, [r9]
 80047fa:	6825      	ldr	r5, [r4, #0]
 80047fc:	f015 0506 	ands.w	r5, r5, #6
 8004800:	d107      	bne.n	8004812 <_printf_common+0x52>
 8004802:	f104 0a19 	add.w	sl, r4, #25
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	f8d9 2000 	ldr.w	r2, [r9]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	42ab      	cmp	r3, r5
 8004810:	dc28      	bgt.n	8004864 <_printf_common+0xa4>
 8004812:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	3300      	adds	r3, #0
 800481a:	bf18      	it	ne
 800481c:	2301      	movne	r3, #1
 800481e:	0692      	lsls	r2, r2, #26
 8004820:	d42d      	bmi.n	800487e <_printf_common+0xbe>
 8004822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004826:	4639      	mov	r1, r7
 8004828:	4630      	mov	r0, r6
 800482a:	47c0      	blx	r8
 800482c:	3001      	adds	r0, #1
 800482e:	d020      	beq.n	8004872 <_printf_common+0xb2>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	68e5      	ldr	r5, [r4, #12]
 8004834:	f8d9 2000 	ldr.w	r2, [r9]
 8004838:	f003 0306 	and.w	r3, r3, #6
 800483c:	2b04      	cmp	r3, #4
 800483e:	bf08      	it	eq
 8004840:	1aad      	subeq	r5, r5, r2
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	bf0c      	ite	eq
 8004848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800484c:	2500      	movne	r5, #0
 800484e:	4293      	cmp	r3, r2
 8004850:	bfc4      	itt	gt
 8004852:	1a9b      	subgt	r3, r3, r2
 8004854:	18ed      	addgt	r5, r5, r3
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	341a      	adds	r4, #26
 800485c:	454d      	cmp	r5, r9
 800485e:	d11a      	bne.n	8004896 <_printf_common+0xd6>
 8004860:	2000      	movs	r0, #0
 8004862:	e008      	b.n	8004876 <_printf_common+0xb6>
 8004864:	2301      	movs	r3, #1
 8004866:	4652      	mov	r2, sl
 8004868:	4639      	mov	r1, r7
 800486a:	4630      	mov	r0, r6
 800486c:	47c0      	blx	r8
 800486e:	3001      	adds	r0, #1
 8004870:	d103      	bne.n	800487a <_printf_common+0xba>
 8004872:	f04f 30ff 	mov.w	r0, #4294967295
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	3501      	adds	r5, #1
 800487c:	e7c3      	b.n	8004806 <_printf_common+0x46>
 800487e:	18e1      	adds	r1, r4, r3
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	2030      	movs	r0, #48	; 0x30
 8004884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004888:	4422      	add	r2, r4
 800488a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004892:	3302      	adds	r3, #2
 8004894:	e7c5      	b.n	8004822 <_printf_common+0x62>
 8004896:	2301      	movs	r3, #1
 8004898:	4622      	mov	r2, r4
 800489a:	4639      	mov	r1, r7
 800489c:	4630      	mov	r0, r6
 800489e:	47c0      	blx	r8
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0e6      	beq.n	8004872 <_printf_common+0xb2>
 80048a4:	f109 0901 	add.w	r9, r9, #1
 80048a8:	e7d8      	b.n	800485c <_printf_common+0x9c>
	...

080048ac <_printf_i>:
 80048ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048b4:	460c      	mov	r4, r1
 80048b6:	7e09      	ldrb	r1, [r1, #24]
 80048b8:	b085      	sub	sp, #20
 80048ba:	296e      	cmp	r1, #110	; 0x6e
 80048bc:	4617      	mov	r7, r2
 80048be:	4606      	mov	r6, r0
 80048c0:	4698      	mov	r8, r3
 80048c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048c4:	f000 80b3 	beq.w	8004a2e <_printf_i+0x182>
 80048c8:	d822      	bhi.n	8004910 <_printf_i+0x64>
 80048ca:	2963      	cmp	r1, #99	; 0x63
 80048cc:	d036      	beq.n	800493c <_printf_i+0x90>
 80048ce:	d80a      	bhi.n	80048e6 <_printf_i+0x3a>
 80048d0:	2900      	cmp	r1, #0
 80048d2:	f000 80b9 	beq.w	8004a48 <_printf_i+0x19c>
 80048d6:	2958      	cmp	r1, #88	; 0x58
 80048d8:	f000 8083 	beq.w	80049e2 <_printf_i+0x136>
 80048dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048e4:	e032      	b.n	800494c <_printf_i+0xa0>
 80048e6:	2964      	cmp	r1, #100	; 0x64
 80048e8:	d001      	beq.n	80048ee <_printf_i+0x42>
 80048ea:	2969      	cmp	r1, #105	; 0x69
 80048ec:	d1f6      	bne.n	80048dc <_printf_i+0x30>
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	6813      	ldr	r3, [r2, #0]
 80048f2:	0605      	lsls	r5, r0, #24
 80048f4:	f103 0104 	add.w	r1, r3, #4
 80048f8:	d52a      	bpl.n	8004950 <_printf_i+0xa4>
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da03      	bge.n	800490a <_printf_i+0x5e>
 8004902:	222d      	movs	r2, #45	; 0x2d
 8004904:	425b      	negs	r3, r3
 8004906:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800490a:	486f      	ldr	r0, [pc, #444]	; (8004ac8 <_printf_i+0x21c>)
 800490c:	220a      	movs	r2, #10
 800490e:	e039      	b.n	8004984 <_printf_i+0xd8>
 8004910:	2973      	cmp	r1, #115	; 0x73
 8004912:	f000 809d 	beq.w	8004a50 <_printf_i+0x1a4>
 8004916:	d808      	bhi.n	800492a <_printf_i+0x7e>
 8004918:	296f      	cmp	r1, #111	; 0x6f
 800491a:	d020      	beq.n	800495e <_printf_i+0xb2>
 800491c:	2970      	cmp	r1, #112	; 0x70
 800491e:	d1dd      	bne.n	80048dc <_printf_i+0x30>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	f043 0320 	orr.w	r3, r3, #32
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	e003      	b.n	8004932 <_printf_i+0x86>
 800492a:	2975      	cmp	r1, #117	; 0x75
 800492c:	d017      	beq.n	800495e <_printf_i+0xb2>
 800492e:	2978      	cmp	r1, #120	; 0x78
 8004930:	d1d4      	bne.n	80048dc <_printf_i+0x30>
 8004932:	2378      	movs	r3, #120	; 0x78
 8004934:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004938:	4864      	ldr	r0, [pc, #400]	; (8004acc <_printf_i+0x220>)
 800493a:	e055      	b.n	80049e8 <_printf_i+0x13c>
 800493c:	6813      	ldr	r3, [r2, #0]
 800493e:	1d19      	adds	r1, r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6011      	str	r1, [r2, #0]
 8004944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800494c:	2301      	movs	r3, #1
 800494e:	e08c      	b.n	8004a6a <_printf_i+0x1be>
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6011      	str	r1, [r2, #0]
 8004954:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004958:	bf18      	it	ne
 800495a:	b21b      	sxthne	r3, r3
 800495c:	e7cf      	b.n	80048fe <_printf_i+0x52>
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	1d18      	adds	r0, r3, #4
 8004964:	6010      	str	r0, [r2, #0]
 8004966:	0628      	lsls	r0, r5, #24
 8004968:	d501      	bpl.n	800496e <_printf_i+0xc2>
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	e002      	b.n	8004974 <_printf_i+0xc8>
 800496e:	0668      	lsls	r0, r5, #25
 8004970:	d5fb      	bpl.n	800496a <_printf_i+0xbe>
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	4854      	ldr	r0, [pc, #336]	; (8004ac8 <_printf_i+0x21c>)
 8004976:	296f      	cmp	r1, #111	; 0x6f
 8004978:	bf14      	ite	ne
 800497a:	220a      	movne	r2, #10
 800497c:	2208      	moveq	r2, #8
 800497e:	2100      	movs	r1, #0
 8004980:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004984:	6865      	ldr	r5, [r4, #4]
 8004986:	60a5      	str	r5, [r4, #8]
 8004988:	2d00      	cmp	r5, #0
 800498a:	f2c0 8095 	blt.w	8004ab8 <_printf_i+0x20c>
 800498e:	6821      	ldr	r1, [r4, #0]
 8004990:	f021 0104 	bic.w	r1, r1, #4
 8004994:	6021      	str	r1, [r4, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d13d      	bne.n	8004a16 <_printf_i+0x16a>
 800499a:	2d00      	cmp	r5, #0
 800499c:	f040 808e 	bne.w	8004abc <_printf_i+0x210>
 80049a0:	4665      	mov	r5, ip
 80049a2:	2a08      	cmp	r2, #8
 80049a4:	d10b      	bne.n	80049be <_printf_i+0x112>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	07db      	lsls	r3, r3, #31
 80049aa:	d508      	bpl.n	80049be <_printf_i+0x112>
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	bfde      	ittt	le
 80049b4:	2330      	movle	r3, #48	; 0x30
 80049b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049be:	ebac 0305 	sub.w	r3, ip, r5
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	f8cd 8000 	str.w	r8, [sp]
 80049c8:	463b      	mov	r3, r7
 80049ca:	aa03      	add	r2, sp, #12
 80049cc:	4621      	mov	r1, r4
 80049ce:	4630      	mov	r0, r6
 80049d0:	f7ff fef6 	bl	80047c0 <_printf_common>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d14d      	bne.n	8004a74 <_printf_i+0x1c8>
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	b005      	add	sp, #20
 80049de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049e2:	4839      	ldr	r0, [pc, #228]	; (8004ac8 <_printf_i+0x21c>)
 80049e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049e8:	6813      	ldr	r3, [r2, #0]
 80049ea:	6821      	ldr	r1, [r4, #0]
 80049ec:	1d1d      	adds	r5, r3, #4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6015      	str	r5, [r2, #0]
 80049f2:	060a      	lsls	r2, r1, #24
 80049f4:	d50b      	bpl.n	8004a0e <_printf_i+0x162>
 80049f6:	07ca      	lsls	r2, r1, #31
 80049f8:	bf44      	itt	mi
 80049fa:	f041 0120 	orrmi.w	r1, r1, #32
 80049fe:	6021      	strmi	r1, [r4, #0]
 8004a00:	b91b      	cbnz	r3, 8004a0a <_printf_i+0x15e>
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	f022 0220 	bic.w	r2, r2, #32
 8004a08:	6022      	str	r2, [r4, #0]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	e7b7      	b.n	800497e <_printf_i+0xd2>
 8004a0e:	064d      	lsls	r5, r1, #25
 8004a10:	bf48      	it	mi
 8004a12:	b29b      	uxthmi	r3, r3
 8004a14:	e7ef      	b.n	80049f6 <_printf_i+0x14a>
 8004a16:	4665      	mov	r5, ip
 8004a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a1c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a20:	5cc3      	ldrb	r3, [r0, r3]
 8004a22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a26:	460b      	mov	r3, r1
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	d1f5      	bne.n	8004a18 <_printf_i+0x16c>
 8004a2c:	e7b9      	b.n	80049a2 <_printf_i+0xf6>
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	6825      	ldr	r5, [r4, #0]
 8004a32:	6961      	ldr	r1, [r4, #20]
 8004a34:	1d18      	adds	r0, r3, #4
 8004a36:	6010      	str	r0, [r2, #0]
 8004a38:	0628      	lsls	r0, r5, #24
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	d501      	bpl.n	8004a42 <_printf_i+0x196>
 8004a3e:	6019      	str	r1, [r3, #0]
 8004a40:	e002      	b.n	8004a48 <_printf_i+0x19c>
 8004a42:	066a      	lsls	r2, r5, #25
 8004a44:	d5fb      	bpl.n	8004a3e <_printf_i+0x192>
 8004a46:	8019      	strh	r1, [r3, #0]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6123      	str	r3, [r4, #16]
 8004a4c:	4665      	mov	r5, ip
 8004a4e:	e7b9      	b.n	80049c4 <_printf_i+0x118>
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	1d19      	adds	r1, r3, #4
 8004a54:	6011      	str	r1, [r2, #0]
 8004a56:	681d      	ldr	r5, [r3, #0]
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f7fb fbc7 	bl	80001f0 <memchr>
 8004a62:	b108      	cbz	r0, 8004a68 <_printf_i+0x1bc>
 8004a64:	1b40      	subs	r0, r0, r5
 8004a66:	6060      	str	r0, [r4, #4]
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a72:	e7a7      	b.n	80049c4 <_printf_i+0x118>
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	462a      	mov	r2, r5
 8004a78:	4639      	mov	r1, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	47c0      	blx	r8
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d0aa      	beq.n	80049d8 <_printf_i+0x12c>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	079b      	lsls	r3, r3, #30
 8004a86:	d413      	bmi.n	8004ab0 <_printf_i+0x204>
 8004a88:	68e0      	ldr	r0, [r4, #12]
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	4298      	cmp	r0, r3
 8004a8e:	bfb8      	it	lt
 8004a90:	4618      	movlt	r0, r3
 8004a92:	e7a3      	b.n	80049dc <_printf_i+0x130>
 8004a94:	2301      	movs	r3, #1
 8004a96:	464a      	mov	r2, r9
 8004a98:	4639      	mov	r1, r7
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d09a      	beq.n	80049d8 <_printf_i+0x12c>
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	68e3      	ldr	r3, [r4, #12]
 8004aa6:	9a03      	ldr	r2, [sp, #12]
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	42ab      	cmp	r3, r5
 8004aac:	dcf2      	bgt.n	8004a94 <_printf_i+0x1e8>
 8004aae:	e7eb      	b.n	8004a88 <_printf_i+0x1dc>
 8004ab0:	2500      	movs	r5, #0
 8004ab2:	f104 0919 	add.w	r9, r4, #25
 8004ab6:	e7f5      	b.n	8004aa4 <_printf_i+0x1f8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ac      	bne.n	8004a16 <_printf_i+0x16a>
 8004abc:	7803      	ldrb	r3, [r0, #0]
 8004abe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac6:	e76c      	b.n	80049a2 <_printf_i+0xf6>
 8004ac8:	0800530f 	.word	0x0800530f
 8004acc:	08005320 	.word	0x08005320

08004ad0 <_sbrk_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4c06      	ldr	r4, [pc, #24]	; (8004aec <_sbrk_r+0x1c>)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	f7fe ff04 	bl	80038e8 <_sbrk>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_sbrk_r+0x1a>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_sbrk_r+0x1a>
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	2000034c 	.word	0x2000034c

08004af0 <__sread>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	460c      	mov	r4, r1
 8004af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af8:	f000 faee 	bl	80050d8 <_read_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	bfab      	itete	ge
 8004b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b02:	89a3      	ldrhlt	r3, [r4, #12]
 8004b04:	181b      	addge	r3, r3, r0
 8004b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b0a:	bfac      	ite	ge
 8004b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b0e:	81a3      	strhlt	r3, [r4, #12]
 8004b10:	bd10      	pop	{r4, pc}

08004b12 <__swrite>:
 8004b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b16:	461f      	mov	r7, r3
 8004b18:	898b      	ldrh	r3, [r1, #12]
 8004b1a:	05db      	lsls	r3, r3, #23
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	4616      	mov	r6, r2
 8004b22:	d505      	bpl.n	8004b30 <__swrite+0x1e>
 8004b24:	2302      	movs	r3, #2
 8004b26:	2200      	movs	r2, #0
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	f000 f9c4 	bl	8004eb8 <_lseek_r>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	463b      	mov	r3, r7
 8004b40:	4628      	mov	r0, r5
 8004b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b46:	f000 b877 	b.w	8004c38 <_write_r>

08004b4a <__sseek>:
 8004b4a:	b510      	push	{r4, lr}
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b52:	f000 f9b1 	bl	8004eb8 <_lseek_r>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	bf15      	itete	ne
 8004b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b66:	81a3      	strheq	r3, [r4, #12]
 8004b68:	bf18      	it	ne
 8004b6a:	81a3      	strhne	r3, [r4, #12]
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <__sclose>:
 8004b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b72:	f000 b8e1 	b.w	8004d38 <_close_r>
	...

08004b78 <__swbuf_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	4605      	mov	r5, r0
 8004b80:	b118      	cbz	r0, 8004b8a <__swbuf_r+0x12>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <__swbuf_r+0x12>
 8004b86:	f7ff fa8f 	bl	80040a8 <__sinit>
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <__swbuf_r+0x98>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12a      	bne.n	8004be6 <__swbuf_r+0x6e>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071a      	lsls	r2, r3, #28
 8004b9a:	d52e      	bpl.n	8004bfa <__swbuf_r+0x82>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b363      	cbz	r3, 8004bfa <__swbuf_r+0x82>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b2f6      	uxtb	r6, r6
 8004baa:	4283      	cmp	r3, r0
 8004bac:	4637      	mov	r7, r6
 8004bae:	dc04      	bgt.n	8004bba <__swbuf_r+0x42>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f956 	bl	8004e64 <_fflush_r>
 8004bb8:	bb28      	cbnz	r0, 8004c06 <__swbuf_r+0x8e>
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60a3      	str	r3, [r4, #8]
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	701e      	strb	r6, [r3, #0]
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	3001      	adds	r0, #1
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d004      	beq.n	8004bda <__swbuf_r+0x62>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	07db      	lsls	r3, r3, #31
 8004bd4:	d519      	bpl.n	8004c0a <__swbuf_r+0x92>
 8004bd6:	2e0a      	cmp	r6, #10
 8004bd8:	d117      	bne.n	8004c0a <__swbuf_r+0x92>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f941 	bl	8004e64 <_fflush_r>
 8004be2:	b190      	cbz	r0, 8004c0a <__swbuf_r+0x92>
 8004be4:	e00f      	b.n	8004c06 <__swbuf_r+0x8e>
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <__swbuf_r+0x9c>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	d101      	bne.n	8004bf0 <__swbuf_r+0x78>
 8004bec:	68ac      	ldr	r4, [r5, #8]
 8004bee:	e7d0      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <__swbuf_r+0xa0>)
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	bf08      	it	eq
 8004bf6:	68ec      	ldreq	r4, [r5, #12]
 8004bf8:	e7cb      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 f82d 	bl	8004c5c <__swsetup_r>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0cc      	beq.n	8004ba0 <__swbuf_r+0x28>
 8004c06:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	080052b4 	.word	0x080052b4
 8004c14:	080052d4 	.word	0x080052d4
 8004c18:	08005294 	.word	0x08005294

08004c1c <__ascii_wctomb>:
 8004c1c:	b149      	cbz	r1, 8004c32 <__ascii_wctomb+0x16>
 8004c1e:	2aff      	cmp	r2, #255	; 0xff
 8004c20:	bf85      	ittet	hi
 8004c22:	238a      	movhi	r3, #138	; 0x8a
 8004c24:	6003      	strhi	r3, [r0, #0]
 8004c26:	700a      	strbls	r2, [r1, #0]
 8004c28:	f04f 30ff 	movhi.w	r0, #4294967295
 8004c2c:	bf98      	it	ls
 8004c2e:	2001      	movls	r0, #1
 8004c30:	4770      	bx	lr
 8004c32:	4608      	mov	r0, r1
 8004c34:	4770      	bx	lr
	...

08004c38 <_write_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4c07      	ldr	r4, [pc, #28]	; (8004c58 <_write_r+0x20>)
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	4608      	mov	r0, r1
 8004c40:	4611      	mov	r1, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	6022      	str	r2, [r4, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fe fdfd 	bl	8003846 <_write>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_write_r+0x1e>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_write_r+0x1e>
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	2000034c 	.word	0x2000034c

08004c5c <__swsetup_r>:
 8004c5c:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <__swsetup_r+0xcc>)
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	4606      	mov	r6, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	b125      	cbz	r5, 8004c72 <__swsetup_r+0x16>
 8004c68:	69ab      	ldr	r3, [r5, #24]
 8004c6a:	b913      	cbnz	r3, 8004c72 <__swsetup_r+0x16>
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f7ff fa1b 	bl	80040a8 <__sinit>
 8004c72:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <__swsetup_r+0xd0>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d10f      	bne.n	8004c98 <__swsetup_r+0x3c>
 8004c78:	686c      	ldr	r4, [r5, #4]
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	0715      	lsls	r5, r2, #28
 8004c82:	d42c      	bmi.n	8004cde <__swsetup_r+0x82>
 8004c84:	06d0      	lsls	r0, r2, #27
 8004c86:	d411      	bmi.n	8004cac <__swsetup_r+0x50>
 8004c88:	2209      	movs	r2, #9
 8004c8a:	6032      	str	r2, [r6, #0]
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	e03e      	b.n	8004d16 <__swsetup_r+0xba>
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <__swsetup_r+0xd4>)
 8004c9a:	429c      	cmp	r4, r3
 8004c9c:	d101      	bne.n	8004ca2 <__swsetup_r+0x46>
 8004c9e:	68ac      	ldr	r4, [r5, #8]
 8004ca0:	e7eb      	b.n	8004c7a <__swsetup_r+0x1e>
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <__swsetup_r+0xd8>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	bf08      	it	eq
 8004ca8:	68ec      	ldreq	r4, [r5, #12]
 8004caa:	e7e6      	b.n	8004c7a <__swsetup_r+0x1e>
 8004cac:	0751      	lsls	r1, r2, #29
 8004cae:	d512      	bpl.n	8004cd6 <__swsetup_r+0x7a>
 8004cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb2:	b141      	cbz	r1, 8004cc6 <__swsetup_r+0x6a>
 8004cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	d002      	beq.n	8004cc2 <__swsetup_r+0x66>
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f000 f997 	bl	8004ff0 <_free_r>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ccc:	81a3      	strh	r3, [r4, #12]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	b94b      	cbnz	r3, 8004cf6 <__swsetup_r+0x9a>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d003      	beq.n	8004cf6 <__swsetup_r+0x9a>
 8004cee:	4621      	mov	r1, r4
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f000 f917 	bl	8004f24 <__smakebuf_r>
 8004cf6:	89a2      	ldrh	r2, [r4, #12]
 8004cf8:	f012 0301 	ands.w	r3, r2, #1
 8004cfc:	d00c      	beq.n	8004d18 <__swsetup_r+0xbc>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60a3      	str	r3, [r4, #8]
 8004d02:	6963      	ldr	r3, [r4, #20]
 8004d04:	425b      	negs	r3, r3
 8004d06:	61a3      	str	r3, [r4, #24]
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	b953      	cbnz	r3, 8004d22 <__swsetup_r+0xc6>
 8004d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d14:	d1ba      	bne.n	8004c8c <__swsetup_r+0x30>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	0792      	lsls	r2, r2, #30
 8004d1a:	bf58      	it	pl
 8004d1c:	6963      	ldrpl	r3, [r4, #20]
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	e7f2      	b.n	8004d08 <__swsetup_r+0xac>
 8004d22:	2000      	movs	r0, #0
 8004d24:	e7f7      	b.n	8004d16 <__swsetup_r+0xba>
 8004d26:	bf00      	nop
 8004d28:	2000001c 	.word	0x2000001c
 8004d2c:	080052b4 	.word	0x080052b4
 8004d30:	080052d4 	.word	0x080052d4
 8004d34:	08005294 	.word	0x08005294

08004d38 <_close_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4c06      	ldr	r4, [pc, #24]	; (8004d54 <_close_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4605      	mov	r5, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	f7fe fd9b 	bl	800387e <_close>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_close_r+0x1a>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_close_r+0x1a>
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	2000034c 	.word	0x2000034c

08004d58 <__sflush_r>:
 8004d58:	898a      	ldrh	r2, [r1, #12]
 8004d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	4605      	mov	r5, r0
 8004d60:	0710      	lsls	r0, r2, #28
 8004d62:	460c      	mov	r4, r1
 8004d64:	d458      	bmi.n	8004e18 <__sflush_r+0xc0>
 8004d66:	684b      	ldr	r3, [r1, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	dc05      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc02      	bgt.n	8004d78 <__sflush_r+0x20>
 8004d72:	2000      	movs	r0, #0
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d0f9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d84:	682f      	ldr	r7, [r5, #0]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	d032      	beq.n	8004df2 <__sflush_r+0x9a>
 8004d8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	075a      	lsls	r2, r3, #29
 8004d92:	d505      	bpl.n	8004da0 <__sflush_r+0x48>
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	1ac0      	subs	r0, r0, r3
 8004d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d9a:	b10b      	cbz	r3, 8004da0 <__sflush_r+0x48>
 8004d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d9e:	1ac0      	subs	r0, r0, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	4602      	mov	r2, r0
 8004da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da6:	6a21      	ldr	r1, [r4, #32]
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b0      	blx	r6
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	d106      	bne.n	8004dc0 <__sflush_r+0x68>
 8004db2:	6829      	ldr	r1, [r5, #0]
 8004db4:	291d      	cmp	r1, #29
 8004db6:	d848      	bhi.n	8004e4a <__sflush_r+0xf2>
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <__sflush_r+0x108>)
 8004dba:	40ca      	lsrs	r2, r1
 8004dbc:	07d6      	lsls	r6, r2, #31
 8004dbe:	d544      	bpl.n	8004e4a <__sflush_r+0xf2>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	6062      	str	r2, [r4, #4]
 8004dc4:	04d9      	lsls	r1, r3, #19
 8004dc6:	6922      	ldr	r2, [r4, #16]
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	d504      	bpl.n	8004dd6 <__sflush_r+0x7e>
 8004dcc:	1c42      	adds	r2, r0, #1
 8004dce:	d101      	bne.n	8004dd4 <__sflush_r+0x7c>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b903      	cbnz	r3, 8004dd6 <__sflush_r+0x7e>
 8004dd4:	6560      	str	r0, [r4, #84]	; 0x54
 8004dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dd8:	602f      	str	r7, [r5, #0]
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	d0c9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004dde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d002      	beq.n	8004dec <__sflush_r+0x94>
 8004de6:	4628      	mov	r0, r5
 8004de8:	f000 f902 	bl	8004ff0 <_free_r>
 8004dec:	2000      	movs	r0, #0
 8004dee:	6360      	str	r0, [r4, #52]	; 0x34
 8004df0:	e7c0      	b.n	8004d74 <__sflush_r+0x1c>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	1c41      	adds	r1, r0, #1
 8004dfa:	d1c8      	bne.n	8004d8e <__sflush_r+0x36>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0c5      	beq.n	8004d8e <__sflush_r+0x36>
 8004e02:	2b1d      	cmp	r3, #29
 8004e04:	d001      	beq.n	8004e0a <__sflush_r+0xb2>
 8004e06:	2b16      	cmp	r3, #22
 8004e08:	d101      	bne.n	8004e0e <__sflush_r+0xb6>
 8004e0a:	602f      	str	r7, [r5, #0]
 8004e0c:	e7b1      	b.n	8004d72 <__sflush_r+0x1a>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	e7ad      	b.n	8004d74 <__sflush_r+0x1c>
 8004e18:	690f      	ldr	r7, [r1, #16]
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d0a9      	beq.n	8004d72 <__sflush_r+0x1a>
 8004e1e:	0793      	lsls	r3, r2, #30
 8004e20:	680e      	ldr	r6, [r1, #0]
 8004e22:	bf08      	it	eq
 8004e24:	694b      	ldreq	r3, [r1, #20]
 8004e26:	600f      	str	r7, [r1, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	eba6 0807 	sub.w	r8, r6, r7
 8004e30:	608b      	str	r3, [r1, #8]
 8004e32:	f1b8 0f00 	cmp.w	r8, #0
 8004e36:	dd9c      	ble.n	8004d72 <__sflush_r+0x1a>
 8004e38:	4643      	mov	r3, r8
 8004e3a:	463a      	mov	r2, r7
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	2800      	cmp	r0, #0
 8004e46:	dc06      	bgt.n	8004e56 <__sflush_r+0xfe>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e78e      	b.n	8004d74 <__sflush_r+0x1c>
 8004e56:	4407      	add	r7, r0
 8004e58:	eba8 0800 	sub.w	r8, r8, r0
 8004e5c:	e7e9      	b.n	8004e32 <__sflush_r+0xda>
 8004e5e:	bf00      	nop
 8004e60:	20400001 	.word	0x20400001

08004e64 <_fflush_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b1db      	cbz	r3, 8004ea6 <_fflush_r+0x42>
 8004e6e:	b118      	cbz	r0, 8004e78 <_fflush_r+0x14>
 8004e70:	6983      	ldr	r3, [r0, #24]
 8004e72:	b90b      	cbnz	r3, 8004e78 <_fflush_r+0x14>
 8004e74:	f7ff f918 	bl	80040a8 <__sinit>
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <_fflush_r+0x48>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d109      	bne.n	8004e92 <_fflush_r+0x2e>
 8004e7e:	686c      	ldr	r4, [r5, #4]
 8004e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e84:	b17b      	cbz	r3, 8004ea6 <_fflush_r+0x42>
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8e:	f7ff bf63 	b.w	8004d58 <__sflush_r>
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <_fflush_r+0x4c>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	d101      	bne.n	8004e9c <_fflush_r+0x38>
 8004e98:	68ac      	ldr	r4, [r5, #8]
 8004e9a:	e7f1      	b.n	8004e80 <_fflush_r+0x1c>
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <_fflush_r+0x50>)
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	bf08      	it	eq
 8004ea2:	68ec      	ldreq	r4, [r5, #12]
 8004ea4:	e7ec      	b.n	8004e80 <_fflush_r+0x1c>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	080052b4 	.word	0x080052b4
 8004eb0:	080052d4 	.word	0x080052d4
 8004eb4:	08005294 	.word	0x08005294

08004eb8 <_lseek_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4c07      	ldr	r4, [pc, #28]	; (8004ed8 <_lseek_r+0x20>)
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	6022      	str	r2, [r4, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fe fd00 	bl	80038cc <_lseek>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_lseek_r+0x1e>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_lseek_r+0x1e>
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	2000034c 	.word	0x2000034c

08004edc <__swhatbuf_r>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	460e      	mov	r6, r1
 8004ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee4:	2900      	cmp	r1, #0
 8004ee6:	b096      	sub	sp, #88	; 0x58
 8004ee8:	4614      	mov	r4, r2
 8004eea:	461d      	mov	r5, r3
 8004eec:	da07      	bge.n	8004efe <__swhatbuf_r+0x22>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	89b3      	ldrh	r3, [r6, #12]
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	d410      	bmi.n	8004f1a <__swhatbuf_r+0x3e>
 8004ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efc:	e00e      	b.n	8004f1c <__swhatbuf_r+0x40>
 8004efe:	466a      	mov	r2, sp
 8004f00:	f000 f8fc 	bl	80050fc <_fstat_r>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	dbf2      	blt.n	8004eee <__swhatbuf_r+0x12>
 8004f08:	9a01      	ldr	r2, [sp, #4]
 8004f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f12:	425a      	negs	r2, r3
 8004f14:	415a      	adcs	r2, r3
 8004f16:	602a      	str	r2, [r5, #0]
 8004f18:	e7ee      	b.n	8004ef8 <__swhatbuf_r+0x1c>
 8004f1a:	2340      	movs	r3, #64	; 0x40
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	b016      	add	sp, #88	; 0x58
 8004f22:	bd70      	pop	{r4, r5, r6, pc}

08004f24 <__smakebuf_r>:
 8004f24:	898b      	ldrh	r3, [r1, #12]
 8004f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f28:	079d      	lsls	r5, r3, #30
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	d507      	bpl.n	8004f40 <__smakebuf_r+0x1c>
 8004f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	6163      	str	r3, [r4, #20]
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	ab01      	add	r3, sp, #4
 8004f42:	466a      	mov	r2, sp
 8004f44:	f7ff ffca 	bl	8004edc <__swhatbuf_r>
 8004f48:	9900      	ldr	r1, [sp, #0]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff f94b 	bl	80041e8 <_malloc_r>
 8004f52:	b948      	cbnz	r0, 8004f68 <__smakebuf_r+0x44>
 8004f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f58:	059a      	lsls	r2, r3, #22
 8004f5a:	d4ef      	bmi.n	8004f3c <__smakebuf_r+0x18>
 8004f5c:	f023 0303 	bic.w	r3, r3, #3
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	81a3      	strh	r3, [r4, #12]
 8004f66:	e7e3      	b.n	8004f30 <__smakebuf_r+0xc>
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <__smakebuf_r+0x7c>)
 8004f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	6020      	str	r0, [r4, #0]
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	6163      	str	r3, [r4, #20]
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	6120      	str	r0, [r4, #16]
 8004f7e:	b15b      	cbz	r3, 8004f98 <__smakebuf_r+0x74>
 8004f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f84:	4630      	mov	r0, r6
 8004f86:	f000 f8cb 	bl	8005120 <_isatty_r>
 8004f8a:	b128      	cbz	r0, 8004f98 <__smakebuf_r+0x74>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	431d      	orrs	r5, r3
 8004f9c:	81a5      	strh	r5, [r4, #12]
 8004f9e:	e7cd      	b.n	8004f3c <__smakebuf_r+0x18>
 8004fa0:	08004071 	.word	0x08004071

08004fa4 <memcpy>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	1e43      	subs	r3, r0, #1
 8004fa8:	440a      	add	r2, r1
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d100      	bne.n	8004fb0 <memcpy+0xc>
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb8:	e7f7      	b.n	8004faa <memcpy+0x6>

08004fba <memmove>:
 8004fba:	4288      	cmp	r0, r1
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	eb01 0302 	add.w	r3, r1, r2
 8004fc2:	d807      	bhi.n	8004fd4 <memmove+0x1a>
 8004fc4:	1e42      	subs	r2, r0, #1
 8004fc6:	4299      	cmp	r1, r3
 8004fc8:	d00a      	beq.n	8004fe0 <memmove+0x26>
 8004fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004fd2:	e7f8      	b.n	8004fc6 <memmove+0xc>
 8004fd4:	4283      	cmp	r3, r0
 8004fd6:	d9f5      	bls.n	8004fc4 <memmove+0xa>
 8004fd8:	1881      	adds	r1, r0, r2
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	42d3      	cmn	r3, r2
 8004fde:	d100      	bne.n	8004fe2 <memmove+0x28>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fe6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004fea:	e7f7      	b.n	8004fdc <memmove+0x22>

08004fec <__malloc_lock>:
 8004fec:	4770      	bx	lr

08004fee <__malloc_unlock>:
 8004fee:	4770      	bx	lr

08004ff0 <_free_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	d045      	beq.n	8005084 <_free_r+0x94>
 8004ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ffc:	1f0c      	subs	r4, r1, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bfb8      	it	lt
 8005002:	18e4      	addlt	r4, r4, r3
 8005004:	f7ff fff2 	bl	8004fec <__malloc_lock>
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <_free_r+0x98>)
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	4610      	mov	r0, r2
 800500e:	b933      	cbnz	r3, 800501e <_free_r+0x2e>
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6014      	str	r4, [r2, #0]
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501a:	f7ff bfe8 	b.w	8004fee <__malloc_unlock>
 800501e:	42a3      	cmp	r3, r4
 8005020:	d90c      	bls.n	800503c <_free_r+0x4c>
 8005022:	6821      	ldr	r1, [r4, #0]
 8005024:	1862      	adds	r2, r4, r1
 8005026:	4293      	cmp	r3, r2
 8005028:	bf04      	itt	eq
 800502a:	681a      	ldreq	r2, [r3, #0]
 800502c:	685b      	ldreq	r3, [r3, #4]
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	bf04      	itt	eq
 8005032:	1852      	addeq	r2, r2, r1
 8005034:	6022      	streq	r2, [r4, #0]
 8005036:	6004      	str	r4, [r0, #0]
 8005038:	e7ec      	b.n	8005014 <_free_r+0x24>
 800503a:	4613      	mov	r3, r2
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	b10a      	cbz	r2, 8005044 <_free_r+0x54>
 8005040:	42a2      	cmp	r2, r4
 8005042:	d9fa      	bls.n	800503a <_free_r+0x4a>
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	1858      	adds	r0, r3, r1
 8005048:	42a0      	cmp	r0, r4
 800504a:	d10b      	bne.n	8005064 <_free_r+0x74>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	4401      	add	r1, r0
 8005050:	1858      	adds	r0, r3, r1
 8005052:	4282      	cmp	r2, r0
 8005054:	6019      	str	r1, [r3, #0]
 8005056:	d1dd      	bne.n	8005014 <_free_r+0x24>
 8005058:	6810      	ldr	r0, [r2, #0]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	4401      	add	r1, r0
 8005060:	6019      	str	r1, [r3, #0]
 8005062:	e7d7      	b.n	8005014 <_free_r+0x24>
 8005064:	d902      	bls.n	800506c <_free_r+0x7c>
 8005066:	230c      	movs	r3, #12
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	e7d3      	b.n	8005014 <_free_r+0x24>
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	1821      	adds	r1, r4, r0
 8005070:	428a      	cmp	r2, r1
 8005072:	bf04      	itt	eq
 8005074:	6811      	ldreq	r1, [r2, #0]
 8005076:	6852      	ldreq	r2, [r2, #4]
 8005078:	6062      	str	r2, [r4, #4]
 800507a:	bf04      	itt	eq
 800507c:	1809      	addeq	r1, r1, r0
 800507e:	6021      	streq	r1, [r4, #0]
 8005080:	605c      	str	r4, [r3, #4]
 8005082:	e7c7      	b.n	8005014 <_free_r+0x24>
 8005084:	bd38      	pop	{r3, r4, r5, pc}
 8005086:	bf00      	nop
 8005088:	20000290 	.word	0x20000290

0800508c <_realloc_r>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	4607      	mov	r7, r0
 8005090:	4614      	mov	r4, r2
 8005092:	460e      	mov	r6, r1
 8005094:	b921      	cbnz	r1, 80050a0 <_realloc_r+0x14>
 8005096:	4611      	mov	r1, r2
 8005098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800509c:	f7ff b8a4 	b.w	80041e8 <_malloc_r>
 80050a0:	b922      	cbnz	r2, 80050ac <_realloc_r+0x20>
 80050a2:	f7ff ffa5 	bl	8004ff0 <_free_r>
 80050a6:	4625      	mov	r5, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ac:	f000 f848 	bl	8005140 <_malloc_usable_size_r>
 80050b0:	42a0      	cmp	r0, r4
 80050b2:	d20f      	bcs.n	80050d4 <_realloc_r+0x48>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4638      	mov	r0, r7
 80050b8:	f7ff f896 	bl	80041e8 <_malloc_r>
 80050bc:	4605      	mov	r5, r0
 80050be:	2800      	cmp	r0, #0
 80050c0:	d0f2      	beq.n	80050a8 <_realloc_r+0x1c>
 80050c2:	4631      	mov	r1, r6
 80050c4:	4622      	mov	r2, r4
 80050c6:	f7ff ff6d 	bl	8004fa4 <memcpy>
 80050ca:	4631      	mov	r1, r6
 80050cc:	4638      	mov	r0, r7
 80050ce:	f7ff ff8f 	bl	8004ff0 <_free_r>
 80050d2:	e7e9      	b.n	80050a8 <_realloc_r+0x1c>
 80050d4:	4635      	mov	r5, r6
 80050d6:	e7e7      	b.n	80050a8 <_realloc_r+0x1c>

080050d8 <_read_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4c07      	ldr	r4, [pc, #28]	; (80050f8 <_read_r+0x20>)
 80050dc:	4605      	mov	r5, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	4611      	mov	r1, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fe fb90 	bl	800380c <_read>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_read_r+0x1e>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_read_r+0x1e>
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	2000034c 	.word	0x2000034c

080050fc <_fstat_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4c07      	ldr	r4, [pc, #28]	; (800511c <_fstat_r+0x20>)
 8005100:	2300      	movs	r3, #0
 8005102:	4605      	mov	r5, r0
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	f7fe fbc4 	bl	8003896 <_fstat>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	d102      	bne.n	8005118 <_fstat_r+0x1c>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	b103      	cbz	r3, 8005118 <_fstat_r+0x1c>
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	bd38      	pop	{r3, r4, r5, pc}
 800511a:	bf00      	nop
 800511c:	2000034c 	.word	0x2000034c

08005120 <_isatty_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4c06      	ldr	r4, [pc, #24]	; (800513c <_isatty_r+0x1c>)
 8005124:	2300      	movs	r3, #0
 8005126:	4605      	mov	r5, r0
 8005128:	4608      	mov	r0, r1
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	f7fe fbc3 	bl	80038b6 <_isatty>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_isatty_r+0x1a>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	b103      	cbz	r3, 800513a <_isatty_r+0x1a>
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	2000034c 	.word	0x2000034c

08005140 <_malloc_usable_size_r>:
 8005140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005144:	1f18      	subs	r0, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	bfbc      	itt	lt
 800514a:	580b      	ldrlt	r3, [r1, r0]
 800514c:	18c0      	addlt	r0, r0, r3
 800514e:	4770      	bx	lr

08005150 <_init>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr

0800515c <_fini>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr
